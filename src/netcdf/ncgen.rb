#!/usr/bin/ruby -w

# Copyright (C) 2004-2007 Jed Brown and Ed Bueler
#
# This file is part of Pism.
#
# Pism is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pism is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License
# along with Pism; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

cdl_input = 'pism_state.cdl'
diag_input = 'pism_diag.fragment'
full_diag_input = 'temp.cdl'
c_source = 'ncgen.c'
diag_source = 'ncgendiag.c'
c_ncvars = 'ncvars.h'
diag_ncvars = 'dncvarsdiag.c'
c_attributes = 'write_attributes.c'
diag_attributes = 'write_diag_attributes.c'

autogen_warning = ["// This file was automatically generated by `ncgen.rb' from",
                   "// `pism_state.cdl'.  If you edit it, your changes will be overwritten",
                   "// on the next invocation of `ncgen.rb'.\n"]
autogen_warning_diag = ["// This file was automatically generated by `ncgen.rb' from",
                   "// `pism_state.cdl' and 'pism_diag.fragment'.  If you edit it,",
                   "// your changes will be overwritten",
                   "// on the next invocation of `ncgen.rb'.\n"]

# put in temp.cdl the combined info in pism_state.cdl and pism_diag.fragment
pp = File.new(cdl_input)
dd = File.new(diag_input)
tt = File.new(full_diag_input,'w')
pp.each do |l|
  break if l =~ /global attributes/
  tt << l;
end
dd.each do |l|
  tt << l;
end
pp.each do |l|
  tt << l;
end
pp.close
dd.close
tt.close

# use ncgen to write C code to write the corresponding NetCDF files
system("ncgen -v2 -c #{cdl_input} > #{c_source}")
# use   system("ncgen -c #{cdl_input} > #{c_source}")  to avoid CF-compliance checker problem "can't read"?
system("ncgen -v2 -c #{full_diag_input} > #{diag_source}")

# process C code for pism_state.cdl to get something includable into PISM
s = File.new(c_source)
s.gets until $_ =~ /^main\(\)/

ov = File.new(c_ncvars, 'w')
ov.puts autogen_warning;

oa = File.new(c_attributes, 'w')
oa.puts autogen_warning

s.each do |l|
  break if l =~ /attribute vectors/
  ov << l;
  l.sub!(/91/, 'grid.p->Mx')
  l.sub!(/92/, 'grid.p->My')
  l.sub!(/93/, 'grid.p->Mz')
  l.sub!(/94/, 'grid.p->Mbz')
  oa << l
end
ov.close

s.each do |l|
  break if l =~ /leave define mode/
  l.sub!(/"pism_state.nc"/, 'fname')
  oa << l
  if l =~ /enter define mode/ then oa << "if (grid.rank == 0) {\n" end
end
oa << "} // end if (grid.rank == 0)\n"
oa.close
s.close

# process C code for temp.cdl to get something includable into PISM
sd = File.new(diag_source)
sd.each do |l|
  break if l =~ /main\(\)/
end
#sd.gets until $_ =~ /^main\(\)/

ovd = File.new(diag_ncvars, 'w')
ovd.puts autogen_warning_diag;

oad = File.new(diag_attributes, 'w')
oad.puts autogen_warning_diag;

sd.each do |l|
  break if l =~ /attribute vectors/
  ovd << l;
  l.sub!(/91/, 'grid.p->Mx')
  l.sub!(/92/, 'grid.p->My')
  l.sub!(/93/, 'grid.p->Mz')
  l.sub!(/94/, 'grid.p->Mbz')
  oad << l
end
ovd.close

sd.each do |l|
  break if l =~ /leave define mode/
  l.sub!(/"pism_state.nc"/, 'diag_fname')
  oad << l
  if l =~ /enter define mode/ then oad << "if (grid.rank == 0) {\n" end
end
oad << "} // end if (grid.rank == 0)\n"
oad.close
sd.close

