# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cpp', [dirname(__file__)])
        except ImportError:
            import _cpp
            return _cpp
        if fp is not None:
            try:
                _mod = imp.load_module('_cpp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cpp = swig_import_helper()
    del swig_import_helper
else:
    import _cpp
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cpp.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _cpp.SwigPyIterator_value(self)
    def incr(self, n = 1): return _cpp.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _cpp.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _cpp.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _cpp.SwigPyIterator_equal(self, *args)
    def copy(self): return _cpp.SwigPyIterator_copy(self)
    def next(self): return _cpp.SwigPyIterator_next(self)
    def __next__(self): return _cpp.SwigPyIterator___next__(self)
    def previous(self): return _cpp.SwigPyIterator_previous(self)
    def advance(self, *args): return _cpp.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _cpp.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _cpp.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _cpp.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _cpp.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _cpp.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _cpp.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _cpp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _cpp.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _cpp.IntVector___nonzero__(self)
    def __bool__(self): return _cpp.IntVector___bool__(self)
    def __len__(self): return _cpp.IntVector___len__(self)
    def pop(self): return _cpp.IntVector_pop(self)
    def __getslice__(self, *args): return _cpp.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _cpp.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _cpp.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _cpp.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _cpp.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _cpp.IntVector___setitem__(self, *args)
    def append(self, *args): return _cpp.IntVector_append(self, *args)
    def empty(self): return _cpp.IntVector_empty(self)
    def size(self): return _cpp.IntVector_size(self)
    def clear(self): return _cpp.IntVector_clear(self)
    def swap(self, *args): return _cpp.IntVector_swap(self, *args)
    def get_allocator(self): return _cpp.IntVector_get_allocator(self)
    def begin(self): return _cpp.IntVector_begin(self)
    def end(self): return _cpp.IntVector_end(self)
    def rbegin(self): return _cpp.IntVector_rbegin(self)
    def rend(self): return _cpp.IntVector_rend(self)
    def pop_back(self): return _cpp.IntVector_pop_back(self)
    def erase(self, *args): return _cpp.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _cpp.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _cpp.IntVector_push_back(self, *args)
    def front(self): return _cpp.IntVector_front(self)
    def back(self): return _cpp.IntVector_back(self)
    def assign(self, *args): return _cpp.IntVector_assign(self, *args)
    def resize(self, *args): return _cpp.IntVector_resize(self, *args)
    def insert(self, *args): return _cpp.IntVector_insert(self, *args)
    def reserve(self, *args): return _cpp.IntVector_reserve(self, *args)
    def capacity(self): return _cpp.IntVector_capacity(self)
    __swig_destroy__ = _cpp.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _cpp.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _cpp.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _cpp.DoubleVector___nonzero__(self)
    def __bool__(self): return _cpp.DoubleVector___bool__(self)
    def __len__(self): return _cpp.DoubleVector___len__(self)
    def pop(self): return _cpp.DoubleVector_pop(self)
    def __getslice__(self, *args): return _cpp.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _cpp.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _cpp.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _cpp.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _cpp.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _cpp.DoubleVector___setitem__(self, *args)
    def append(self, *args): return _cpp.DoubleVector_append(self, *args)
    def empty(self): return _cpp.DoubleVector_empty(self)
    def size(self): return _cpp.DoubleVector_size(self)
    def clear(self): return _cpp.DoubleVector_clear(self)
    def swap(self, *args): return _cpp.DoubleVector_swap(self, *args)
    def get_allocator(self): return _cpp.DoubleVector_get_allocator(self)
    def begin(self): return _cpp.DoubleVector_begin(self)
    def end(self): return _cpp.DoubleVector_end(self)
    def rbegin(self): return _cpp.DoubleVector_rbegin(self)
    def rend(self): return _cpp.DoubleVector_rend(self)
    def pop_back(self): return _cpp.DoubleVector_pop_back(self)
    def erase(self, *args): return _cpp.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _cpp.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _cpp.DoubleVector_push_back(self, *args)
    def front(self): return _cpp.DoubleVector_front(self)
    def back(self): return _cpp.DoubleVector_back(self)
    def assign(self, *args): return _cpp.DoubleVector_assign(self, *args)
    def resize(self, *args): return _cpp.DoubleVector_resize(self, *args)
    def insert(self, *args): return _cpp.DoubleVector_insert(self, *args)
    def reserve(self, *args): return _cpp.DoubleVector_reserve(self, *args)
    def capacity(self): return _cpp.DoubleVector_capacity(self)
    __swig_destroy__ = _cpp.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _cpp.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

NC_NAT = _cpp.NC_NAT
NC_BYTE = _cpp.NC_BYTE
NC_CHAR = _cpp.NC_CHAR
NC_SHORT = _cpp.NC_SHORT
NC_INT = _cpp.NC_INT
NC_LONG = _cpp.NC_LONG
NC_FLOAT = _cpp.NC_FLOAT
NC_DOUBLE = _cpp.NC_DOUBLE
NC_UBYTE = _cpp.NC_UBYTE
NC_USHORT = _cpp.NC_USHORT
NC_UINT = _cpp.NC_UINT
NC_INT64 = _cpp.NC_INT64
NC_UINT64 = _cpp.NC_UINT64
NC_STRING = _cpp.NC_STRING
UNKNOWN = _cpp.UNKNOWN
EQUAL = _cpp.EQUAL
QUADRATIC = _cpp.QUADRATIC
NONE = _cpp.NONE
X_PERIODIC = _cpp.X_PERIODIC
Y_PERIODIC = _cpp.Y_PERIODIC
XY_PERIODIC = _cpp.XY_PERIODIC
class IceGrid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IceGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IceGrid, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cpp.new_IceGrid(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_IceGrid
    __del__ = lambda self : None;
    def report_parameters(self): return _cpp.IceGrid_report_parameters(self)
    def createDA(self, *args): return _cpp.IceGrid_createDA(self, *args)
    def set_vertical_levels(self, *args): return _cpp.IceGrid_set_vertical_levels(self, *args)
    def compute_vertical_levels(self): return _cpp.IceGrid_compute_vertical_levels(self)
    def compute_ice_vertical_levels(self): return _cpp.IceGrid_compute_ice_vertical_levels(self)
    def compute_bed_vertical_levels(self): return _cpp.IceGrid_compute_bed_vertical_levels(self)
    def compute_horizontal_spacing(self): return _cpp.IceGrid_compute_horizontal_spacing(self)
    def compute_point_neighbors(self, *args): return _cpp.IceGrid_compute_point_neighbors(self, *args)
    def compute_interp_weights(self, *args): return _cpp.IceGrid_compute_interp_weights(self, *args)
    def compute_nprocs(self): return _cpp.IceGrid_compute_nprocs(self)
    def compute_ownership_ranges(self): return _cpp.IceGrid_compute_ownership_ranges(self)
    def compute_viewer_size(self, *args): return _cpp.IceGrid_compute_viewer_size(self, *args)
    def printInfo(self, *args): return _cpp.IceGrid_printInfo(self, *args)
    def printVertLevels(self, *args): return _cpp.IceGrid_printVertLevels(self, *args)
    def kBelowHeight(self, *args): return _cpp.IceGrid_kBelowHeight(self, *args)
    def create_viewer(self, *args): return _cpp.IceGrid_create_viewer(self, *args)
    def radius(self, *args): return _cpp.IceGrid_radius(self, *args)
    __swig_getmethods__["config"] = _cpp.IceGrid_config_get
    if _newclass:config = _swig_property(_cpp.IceGrid_config_get)
    __swig_setmethods__["com"] = _cpp.IceGrid_com_set
    __swig_getmethods__["com"] = _cpp.IceGrid_com_get
    if _newclass:com = _swig_property(_cpp.IceGrid_com_get, _cpp.IceGrid_com_set)
    __swig_setmethods__["rank"] = _cpp.IceGrid_rank_set
    __swig_getmethods__["rank"] = _cpp.IceGrid_rank_get
    if _newclass:rank = _swig_property(_cpp.IceGrid_rank_get, _cpp.IceGrid_rank_set)
    __swig_setmethods__["size"] = _cpp.IceGrid_size_set
    __swig_getmethods__["size"] = _cpp.IceGrid_size_get
    if _newclass:size = _swig_property(_cpp.IceGrid_size_get, _cpp.IceGrid_size_set)
    __swig_setmethods__["da2"] = _cpp.IceGrid_da2_set
    __swig_getmethods__["da2"] = _cpp.IceGrid_da2_get
    if _newclass:da2 = _swig_property(_cpp.IceGrid_da2_get, _cpp.IceGrid_da2_set)
    __swig_setmethods__["xs"] = _cpp.IceGrid_xs_set
    __swig_getmethods__["xs"] = _cpp.IceGrid_xs_get
    if _newclass:xs = _swig_property(_cpp.IceGrid_xs_get, _cpp.IceGrid_xs_set)
    __swig_setmethods__["xm"] = _cpp.IceGrid_xm_set
    __swig_getmethods__["xm"] = _cpp.IceGrid_xm_get
    if _newclass:xm = _swig_property(_cpp.IceGrid_xm_get, _cpp.IceGrid_xm_set)
    __swig_setmethods__["ys"] = _cpp.IceGrid_ys_set
    __swig_getmethods__["ys"] = _cpp.IceGrid_ys_get
    if _newclass:ys = _swig_property(_cpp.IceGrid_ys_get, _cpp.IceGrid_ys_set)
    __swig_setmethods__["ym"] = _cpp.IceGrid_ym_set
    __swig_getmethods__["ym"] = _cpp.IceGrid_ym_get
    if _newclass:ym = _swig_property(_cpp.IceGrid_ym_get, _cpp.IceGrid_ym_set)
    __swig_setmethods__["zlevels"] = _cpp.IceGrid_zlevels_set
    __swig_getmethods__["zlevels"] = _cpp.IceGrid_zlevels_get
    if _newclass:zlevels = _swig_property(_cpp.IceGrid_zlevels_get, _cpp.IceGrid_zlevels_set)
    __swig_setmethods__["zblevels"] = _cpp.IceGrid_zblevels_set
    __swig_getmethods__["zblevels"] = _cpp.IceGrid_zblevels_get
    if _newclass:zblevels = _swig_property(_cpp.IceGrid_zblevels_get, _cpp.IceGrid_zblevels_set)
    __swig_setmethods__["x"] = _cpp.IceGrid_x_set
    __swig_getmethods__["x"] = _cpp.IceGrid_x_get
    if _newclass:x = _swig_property(_cpp.IceGrid_x_get, _cpp.IceGrid_x_set)
    __swig_setmethods__["y"] = _cpp.IceGrid_y_set
    __swig_getmethods__["y"] = _cpp.IceGrid_y_get
    if _newclass:y = _swig_property(_cpp.IceGrid_y_get, _cpp.IceGrid_y_set)
    __swig_setmethods__["zlevels_fine"] = _cpp.IceGrid_zlevels_fine_set
    __swig_getmethods__["zlevels_fine"] = _cpp.IceGrid_zlevels_fine_get
    if _newclass:zlevels_fine = _swig_property(_cpp.IceGrid_zlevels_fine_get, _cpp.IceGrid_zlevels_fine_set)
    __swig_setmethods__["zblevels_fine"] = _cpp.IceGrid_zblevels_fine_set
    __swig_getmethods__["zblevels_fine"] = _cpp.IceGrid_zblevels_fine_get
    if _newclass:zblevels_fine = _swig_property(_cpp.IceGrid_zblevels_fine_get, _cpp.IceGrid_zblevels_fine_set)
    __swig_setmethods__["dz_fine"] = _cpp.IceGrid_dz_fine_set
    __swig_getmethods__["dz_fine"] = _cpp.IceGrid_dz_fine_get
    if _newclass:dz_fine = _swig_property(_cpp.IceGrid_dz_fine_get, _cpp.IceGrid_dz_fine_set)
    __swig_setmethods__["Mz_fine"] = _cpp.IceGrid_Mz_fine_set
    __swig_getmethods__["Mz_fine"] = _cpp.IceGrid_Mz_fine_get
    if _newclass:Mz_fine = _swig_property(_cpp.IceGrid_Mz_fine_get, _cpp.IceGrid_Mz_fine_set)
    __swig_setmethods__["Mbz_fine"] = _cpp.IceGrid_Mbz_fine_set
    __swig_getmethods__["Mbz_fine"] = _cpp.IceGrid_Mbz_fine_get
    if _newclass:Mbz_fine = _swig_property(_cpp.IceGrid_Mbz_fine_get, _cpp.IceGrid_Mbz_fine_set)
    __swig_setmethods__["ice_storage2fine"] = _cpp.IceGrid_ice_storage2fine_set
    __swig_getmethods__["ice_storage2fine"] = _cpp.IceGrid_ice_storage2fine_get
    if _newclass:ice_storage2fine = _swig_property(_cpp.IceGrid_ice_storage2fine_get, _cpp.IceGrid_ice_storage2fine_set)
    __swig_setmethods__["ice_fine2storage"] = _cpp.IceGrid_ice_fine2storage_set
    __swig_getmethods__["ice_fine2storage"] = _cpp.IceGrid_ice_fine2storage_get
    if _newclass:ice_fine2storage = _swig_property(_cpp.IceGrid_ice_fine2storage_get, _cpp.IceGrid_ice_fine2storage_set)
    __swig_setmethods__["bed_storage2fine"] = _cpp.IceGrid_bed_storage2fine_set
    __swig_getmethods__["bed_storage2fine"] = _cpp.IceGrid_bed_storage2fine_get
    if _newclass:bed_storage2fine = _swig_property(_cpp.IceGrid_bed_storage2fine_get, _cpp.IceGrid_bed_storage2fine_set)
    __swig_setmethods__["bed_fine2storage"] = _cpp.IceGrid_bed_fine2storage_set
    __swig_getmethods__["bed_fine2storage"] = _cpp.IceGrid_bed_fine2storage_get
    if _newclass:bed_fine2storage = _swig_property(_cpp.IceGrid_bed_fine2storage_get, _cpp.IceGrid_bed_fine2storage_set)
    __swig_setmethods__["ice_vertical_spacing"] = _cpp.IceGrid_ice_vertical_spacing_set
    __swig_getmethods__["ice_vertical_spacing"] = _cpp.IceGrid_ice_vertical_spacing_get
    if _newclass:ice_vertical_spacing = _swig_property(_cpp.IceGrid_ice_vertical_spacing_get, _cpp.IceGrid_ice_vertical_spacing_set)
    __swig_setmethods__["bed_vertical_spacing"] = _cpp.IceGrid_bed_vertical_spacing_set
    __swig_getmethods__["bed_vertical_spacing"] = _cpp.IceGrid_bed_vertical_spacing_get
    if _newclass:bed_vertical_spacing = _swig_property(_cpp.IceGrid_bed_vertical_spacing_get, _cpp.IceGrid_bed_vertical_spacing_set)
    __swig_setmethods__["periodicity"] = _cpp.IceGrid_periodicity_set
    __swig_getmethods__["periodicity"] = _cpp.IceGrid_periodicity_get
    if _newclass:periodicity = _swig_property(_cpp.IceGrid_periodicity_get, _cpp.IceGrid_periodicity_set)
    __swig_setmethods__["dzMIN"] = _cpp.IceGrid_dzMIN_set
    __swig_getmethods__["dzMIN"] = _cpp.IceGrid_dzMIN_get
    if _newclass:dzMIN = _swig_property(_cpp.IceGrid_dzMIN_get, _cpp.IceGrid_dzMIN_set)
    __swig_setmethods__["dzMAX"] = _cpp.IceGrid_dzMAX_set
    __swig_getmethods__["dzMAX"] = _cpp.IceGrid_dzMAX_get
    if _newclass:dzMAX = _swig_property(_cpp.IceGrid_dzMAX_get, _cpp.IceGrid_dzMAX_set)
    __swig_setmethods__["dzbMIN"] = _cpp.IceGrid_dzbMIN_set
    __swig_getmethods__["dzbMIN"] = _cpp.IceGrid_dzbMIN_get
    if _newclass:dzbMIN = _swig_property(_cpp.IceGrid_dzbMIN_get, _cpp.IceGrid_dzbMIN_set)
    __swig_setmethods__["dzbMAX"] = _cpp.IceGrid_dzbMAX_set
    __swig_getmethods__["dzbMAX"] = _cpp.IceGrid_dzbMAX_get
    if _newclass:dzbMAX = _swig_property(_cpp.IceGrid_dzbMAX_get, _cpp.IceGrid_dzbMAX_set)
    __swig_setmethods__["x0"] = _cpp.IceGrid_x0_set
    __swig_getmethods__["x0"] = _cpp.IceGrid_x0_get
    if _newclass:x0 = _swig_property(_cpp.IceGrid_x0_get, _cpp.IceGrid_x0_set)
    __swig_setmethods__["y0"] = _cpp.IceGrid_y0_set
    __swig_getmethods__["y0"] = _cpp.IceGrid_y0_get
    if _newclass:y0 = _swig_property(_cpp.IceGrid_y0_get, _cpp.IceGrid_y0_set)
    __swig_setmethods__["Lx"] = _cpp.IceGrid_Lx_set
    __swig_getmethods__["Lx"] = _cpp.IceGrid_Lx_get
    if _newclass:Lx = _swig_property(_cpp.IceGrid_Lx_get, _cpp.IceGrid_Lx_set)
    __swig_setmethods__["Ly"] = _cpp.IceGrid_Ly_set
    __swig_getmethods__["Ly"] = _cpp.IceGrid_Ly_get
    if _newclass:Ly = _swig_property(_cpp.IceGrid_Ly_get, _cpp.IceGrid_Ly_set)
    __swig_setmethods__["Mx"] = _cpp.IceGrid_Mx_set
    __swig_getmethods__["Mx"] = _cpp.IceGrid_Mx_get
    if _newclass:Mx = _swig_property(_cpp.IceGrid_Mx_get, _cpp.IceGrid_Mx_set)
    __swig_setmethods__["My"] = _cpp.IceGrid_My_set
    __swig_getmethods__["My"] = _cpp.IceGrid_My_get
    if _newclass:My = _swig_property(_cpp.IceGrid_My_get, _cpp.IceGrid_My_set)
    __swig_setmethods__["Nx"] = _cpp.IceGrid_Nx_set
    __swig_getmethods__["Nx"] = _cpp.IceGrid_Nx_get
    if _newclass:Nx = _swig_property(_cpp.IceGrid_Nx_get, _cpp.IceGrid_Nx_set)
    __swig_setmethods__["Ny"] = _cpp.IceGrid_Ny_set
    __swig_getmethods__["Ny"] = _cpp.IceGrid_Ny_get
    if _newclass:Ny = _swig_property(_cpp.IceGrid_Ny_get, _cpp.IceGrid_Ny_set)
    __swig_setmethods__["procs_x"] = _cpp.IceGrid_procs_x_set
    __swig_getmethods__["procs_x"] = _cpp.IceGrid_procs_x_get
    if _newclass:procs_x = _swig_property(_cpp.IceGrid_procs_x_get, _cpp.IceGrid_procs_x_set)
    __swig_setmethods__["procs_y"] = _cpp.IceGrid_procs_y_set
    __swig_getmethods__["procs_y"] = _cpp.IceGrid_procs_y_get
    if _newclass:procs_y = _swig_property(_cpp.IceGrid_procs_y_get, _cpp.IceGrid_procs_y_set)
    __swig_setmethods__["dx"] = _cpp.IceGrid_dx_set
    __swig_getmethods__["dx"] = _cpp.IceGrid_dx_get
    if _newclass:dx = _swig_property(_cpp.IceGrid_dx_get, _cpp.IceGrid_dx_set)
    __swig_setmethods__["dy"] = _cpp.IceGrid_dy_set
    __swig_getmethods__["dy"] = _cpp.IceGrid_dy_get
    if _newclass:dy = _swig_property(_cpp.IceGrid_dy_get, _cpp.IceGrid_dy_set)
    __swig_setmethods__["Lz"] = _cpp.IceGrid_Lz_set
    __swig_getmethods__["Lz"] = _cpp.IceGrid_Lz_get
    if _newclass:Lz = _swig_property(_cpp.IceGrid_Lz_get, _cpp.IceGrid_Lz_set)
    __swig_setmethods__["Lbz"] = _cpp.IceGrid_Lbz_set
    __swig_getmethods__["Lbz"] = _cpp.IceGrid_Lbz_get
    if _newclass:Lbz = _swig_property(_cpp.IceGrid_Lbz_get, _cpp.IceGrid_Lbz_set)
    __swig_setmethods__["Mz"] = _cpp.IceGrid_Mz_set
    __swig_getmethods__["Mz"] = _cpp.IceGrid_Mz_get
    if _newclass:Mz = _swig_property(_cpp.IceGrid_Mz_get, _cpp.IceGrid_Mz_set)
    __swig_setmethods__["Mbz"] = _cpp.IceGrid_Mbz_set
    __swig_getmethods__["Mbz"] = _cpp.IceGrid_Mbz_get
    if _newclass:Mbz = _swig_property(_cpp.IceGrid_Mbz_get, _cpp.IceGrid_Mbz_set)
    __swig_setmethods__["initial_Mz"] = _cpp.IceGrid_initial_Mz_set
    __swig_getmethods__["initial_Mz"] = _cpp.IceGrid_initial_Mz_get
    if _newclass:initial_Mz = _swig_property(_cpp.IceGrid_initial_Mz_get, _cpp.IceGrid_initial_Mz_set)
    __swig_setmethods__["max_stencil_width"] = _cpp.IceGrid_max_stencil_width_set
    __swig_getmethods__["max_stencil_width"] = _cpp.IceGrid_max_stencil_width_get
    if _newclass:max_stencil_width = _swig_property(_cpp.IceGrid_max_stencil_width_get, _cpp.IceGrid_max_stencil_width_set)
    __swig_setmethods__["year"] = _cpp.IceGrid_year_set
    __swig_getmethods__["year"] = _cpp.IceGrid_year_get
    if _newclass:year = _swig_property(_cpp.IceGrid_year_get, _cpp.IceGrid_year_set)
    __swig_setmethods__["start_year"] = _cpp.IceGrid_start_year_set
    __swig_getmethods__["start_year"] = _cpp.IceGrid_start_year_get
    if _newclass:start_year = _swig_property(_cpp.IceGrid_start_year_get, _cpp.IceGrid_start_year_set)
    __swig_setmethods__["end_year"] = _cpp.IceGrid_end_year_set
    __swig_getmethods__["end_year"] = _cpp.IceGrid_end_year_get
    if _newclass:end_year = _swig_property(_cpp.IceGrid_end_year_get, _cpp.IceGrid_end_year_set)
    __swig_setmethods__["profiler"] = _cpp.IceGrid_profiler_set
    __swig_getmethods__["profiler"] = _cpp.IceGrid_profiler_get
    if _newclass:profiler = _swig_property(_cpp.IceGrid_profiler_get, _cpp.IceGrid_profiler_set)
IceGrid_swigregister = _cpp.IceGrid_swigregister
IceGrid_swigregister(IceGrid)

class NCVariable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NCVariable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NCVariable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cpp.delete_NCVariable
    __del__ = lambda self : None;
    def init(self, *args): return _cpp.NCVariable_init(self, *args)
    def set_units(self, *args): return _cpp.NCVariable_set_units(self, *args)
    def set_glaciological_units(self, *args): return _cpp.NCVariable_set_glaciological_units(self, *args)
    def reset(self): return _cpp.NCVariable_reset(self)
    def set(self, *args): return _cpp.NCVariable_set(self, *args)
    def get(self, *args): return _cpp.NCVariable_get(self, *args)
    def set_string(self, *args): return _cpp.NCVariable_set_string(self, *args)
    def get_string(self, *args): return _cpp.NCVariable_get_string(self, *args)
    def has(self, *args): return _cpp.NCVariable_has(self, *args)
    def is_valid(self, *args): return _cpp.NCVariable_is_valid(self, *args)
    __swig_setmethods__["short_name"] = _cpp.NCVariable_short_name_set
    __swig_getmethods__["short_name"] = _cpp.NCVariable_short_name_get
    if _newclass:short_name = _swig_property(_cpp.NCVariable_short_name_get, _cpp.NCVariable_short_name_set)
    __swig_setmethods__["doubles"] = _cpp.NCVariable_doubles_set
    __swig_getmethods__["doubles"] = _cpp.NCVariable_doubles_get
    if _newclass:doubles = _swig_property(_cpp.NCVariable_doubles_get, _cpp.NCVariable_doubles_set)
    def define(self, *args): return _cpp.NCVariable_define(self, *args)
NCVariable_swigregister = _cpp.NCVariable_swigregister
NCVariable_swigregister(NCVariable)

class NCConfigVariable(NCVariable):
    __swig_setmethods__ = {}
    for _s in [NCVariable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NCConfigVariable, name, value)
    __swig_getmethods__ = {}
    for _s in [NCVariable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NCConfigVariable, name)
    __repr__ = _swig_repr
    def _print(self, *args): return _cpp.NCConfigVariable__print(self, *args)
    def read(self, *args): return _cpp.NCConfigVariable_read(self, *args)
    def write(self, *args): return _cpp.NCConfigVariable_write(self, *args)
    def get_config_filename(self): return _cpp.NCConfigVariable_get_config_filename(self)
    def get(self, *args): return _cpp.NCConfigVariable_get(self, *args)
    def get_flag(self, *args): return _cpp.NCConfigVariable_get_flag(self, *args)
    def get_string(self, *args): return _cpp.NCConfigVariable_get_string(self, *args)
    def set_flag(self, *args): return _cpp.NCConfigVariable_set_flag(self, *args)
    def flag_from_option(self, *args): return _cpp.NCConfigVariable_flag_from_option(self, *args)
    def scalar_from_option(self, *args): return _cpp.NCConfigVariable_scalar_from_option(self, *args)
    def import_from(self, *args): return _cpp.NCConfigVariable_import_from(self, *args)
    def update_from(self, *args): return _cpp.NCConfigVariable_update_from(self, *args)
    def define(self, *args): return _cpp.NCConfigVariable_define(self, *args)
    def __init__(self): 
        this = _cpp.new_NCConfigVariable()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_NCConfigVariable
    __del__ = lambda self : None;
NCConfigVariable_swigregister = _cpp.NCConfigVariable_swigregister
NCConfigVariable_swigregister(NCConfigVariable)

class NCGlobalAttributes(NCConfigVariable):
    __swig_setmethods__ = {}
    for _s in [NCConfigVariable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NCGlobalAttributes, name, value)
    __swig_getmethods__ = {}
    for _s in [NCConfigVariable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NCGlobalAttributes, name)
    __repr__ = _swig_repr
    def read(self, *args): return _cpp.NCGlobalAttributes_read(self, *args)
    def write(self, *args): return _cpp.NCGlobalAttributes_write(self, *args)
    def prepend_history(self, *args): return _cpp.NCGlobalAttributes_prepend_history(self, *args)
    def __init__(self): 
        this = _cpp.new_NCGlobalAttributes()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_NCGlobalAttributes
    __del__ = lambda self : None;
NCGlobalAttributes_swigregister = _cpp.NCGlobalAttributes_swigregister
NCGlobalAttributes_swigregister(NCGlobalAttributes)

class NCTimeseries(NCVariable):
    __swig_setmethods__ = {}
    for _s in [NCVariable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NCTimeseries, name, value)
    __swig_getmethods__ = {}
    for _s in [NCVariable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NCTimeseries, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dimension_name"] = _cpp.NCTimeseries_dimension_name_set
    __swig_getmethods__["dimension_name"] = _cpp.NCTimeseries_dimension_name_get
    if _newclass:dimension_name = _swig_property(_cpp.NCTimeseries_dimension_name_get, _cpp.NCTimeseries_dimension_name_set)
    def init(self, *args): return _cpp.NCTimeseries_init(self, *args)
    def read(self, *args): return _cpp.NCTimeseries_read(self, *args)
    def write(self, *args): return _cpp.NCTimeseries_write(self, *args)
    def change_units(self, *args): return _cpp.NCTimeseries_change_units(self, *args)
    def report_range(self, *args): return _cpp.NCTimeseries_report_range(self, *args)
    def define(self, *args): return _cpp.NCTimeseries_define(self, *args)
    def __init__(self): 
        this = _cpp.new_NCTimeseries()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_NCTimeseries
    __del__ = lambda self : None;
NCTimeseries_swigregister = _cpp.NCTimeseries_swigregister
NCTimeseries_swigregister(NCTimeseries)

MASK_UNKNOWN = _cpp.MASK_UNKNOWN
MASK_ICE_FREE_BEDROCK = _cpp.MASK_ICE_FREE_BEDROCK
MASK_GROUNDED = _cpp.MASK_GROUNDED
MASK_FLOATING = _cpp.MASK_FLOATING
MASK_ICE_FREE_OCEAN = _cpp.MASK_ICE_FREE_OCEAN
MASK_OCEAN_AT_TIME_0 = _cpp.MASK_OCEAN_AT_TIME_0
ICEBERGMASK_NO_ICEBERG = _cpp.ICEBERGMASK_NO_ICEBERG
ICEBERGMASK_NOT_SET = _cpp.ICEBERGMASK_NOT_SET
ICEBERGMASK_ICEBERG_CAND = _cpp.ICEBERGMASK_ICEBERG_CAND
ICEBERGMASK_STOP_OCEAN = _cpp.ICEBERGMASK_STOP_OCEAN
ICEBERGMASK_STOP_ATTACHED = _cpp.ICEBERGMASK_STOP_ATTACHED

def is_increasing(*args):
  return _cpp.is_increasing(*args)
is_increasing = _cpp.is_increasing

def setVerbosityLevel(*args):
  return _cpp.setVerbosityLevel(*args)
setVerbosityLevel = _cpp.setVerbosityLevel

def getVerbosityLevel():
  return _cpp.getVerbosityLevel()
getVerbosityLevel = _cpp.getVerbosityLevel

def verbosityLevelFromOptions():
  return _cpp.verbosityLevelFromOptions()
verbosityLevelFromOptions = _cpp.verbosityLevelFromOptions

def verbPrintf(*args):
  return _cpp.verbPrintf(*args)
verbPrintf = _cpp.verbPrintf

def endPrintRank():
  return _cpp.endPrintRank()
endPrintRank = _cpp.endPrintRank

def pism_timestamp():
  return _cpp.pism_timestamp()
pism_timestamp = _cpp.pism_timestamp

def pism_username_prefix():
  return _cpp.pism_username_prefix()
pism_username_prefix = _cpp.pism_username_prefix

def pism_args_string():
  return _cpp.pism_args_string()
pism_args_string = _cpp.pism_args_string

def pism_filename_add_suffix(*args):
  return _cpp.pism_filename_add_suffix(*args)
pism_filename_add_suffix = _cpp.pism_filename_add_suffix

def ends_with(*args):
  return _cpp.ends_with(*args)
ends_with = _cpp.ends_with

def set_contains(*args):
  return _cpp.set_contains(*args)
set_contains = _cpp.set_contains

def PISMOptionsList(*args):
  return _cpp.PISMOptionsList(*args)
PISMOptionsList = _cpp.PISMOptionsList

def PISMOptionsString(*args):
  return _cpp.PISMOptionsString(*args)
PISMOptionsString = _cpp.PISMOptionsString

def PISMOptionsStringArray(*args):
  return _cpp.PISMOptionsStringArray(*args)
PISMOptionsStringArray = _cpp.PISMOptionsStringArray

def PISMOptionsInt(*args):
  return _cpp.PISMOptionsInt(*args)
PISMOptionsInt = _cpp.PISMOptionsInt

def PISMOptionsIntArray(*args):
  return _cpp.PISMOptionsIntArray(*args)
PISMOptionsIntArray = _cpp.PISMOptionsIntArray

def PISMOptionsReal(*args):
  return _cpp.PISMOptionsReal(*args)
PISMOptionsReal = _cpp.PISMOptionsReal

def PISMOptionsRealArray(*args):
  return _cpp.PISMOptionsRealArray(*args)
PISMOptionsRealArray = _cpp.PISMOptionsRealArray

def PISMEnd():
  return _cpp.PISMEnd()
PISMEnd = _cpp.PISMEnd

def ignore_option(*args):
  return _cpp.ignore_option(*args)
ignore_option = _cpp.ignore_option

def check_old_option_and_stop(*args):
  return _cpp.check_old_option_and_stop(*args)
check_old_option_and_stop = _cpp.check_old_option_and_stop

def stop_if_set(*args):
  return _cpp.stop_if_set(*args)
stop_if_set = _cpp.stop_if_set

def parse_range(*args):
  return _cpp.parse_range(*args)
parse_range = _cpp.parse_range

def parse_times(*args):
  return _cpp.parse_times(*args)
parse_times = _cpp.parse_times

def stop_on_version_option():
  return _cpp.stop_on_version_option()
stop_on_version_option = _cpp.stop_on_version_option

def show_usage_and_quit(*args):
  return _cpp.show_usage_and_quit(*args)
show_usage_and_quit = _cpp.show_usage_and_quit

def show_usage_check_req_opts(*args):
  return _cpp.show_usage_check_req_opts(*args)
show_usage_check_req_opts = _cpp.show_usage_check_req_opts

def init_config(*args):
  return _cpp.init_config(*args)
init_config = _cpp.init_config

def pism_wait_for_gdb(*args):
  return _cpp.pism_wait_for_gdb(*args)
pism_wait_for_gdb = _cpp.pism_wait_for_gdb
class IceModelVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IceModelVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IceModelVec, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cpp.new_IceModelVec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_IceModelVec
    __del__ = lambda self : None;
    def was_created(self): return _cpp.IceModelVec_was_created(self)
    def grid_type(self): return _cpp.IceModelVec_grid_type(self)
    def get_dof(self): return _cpp.IceModelVec_get_dof(self)
    def range(self, *args): return _cpp.IceModelVec_range(self, *args)
    def norm(self, *args): return _cpp.IceModelVec_norm(self, *args)
    def add(self, *args): return _cpp.IceModelVec_add(self, *args)
    def squareroot(self): return _cpp.IceModelVec_squareroot(self)
    def shift(self, *args): return _cpp.IceModelVec_shift(self, *args)
    def scale(self, *args): return _cpp.IceModelVec_scale(self, *args)
    def multiply_by(self, *args): return _cpp.IceModelVec_multiply_by(self, *args)
    def copy_to(self, *args): return _cpp.IceModelVec_copy_to(self, *args)
    def copy_from(self, *args): return _cpp.IceModelVec_copy_from(self, *args)
    def has_nan(self): return _cpp.IceModelVec_has_nan(self)
    def set_name(self, *args): return _cpp.IceModelVec_set_name(self, *args)
    def set_glaciological_units(self, *args): return _cpp.IceModelVec_set_glaciological_units(self, *args)
    def set_attr(self, *args): return _cpp.IceModelVec_set_attr(self, *args)
    def has_attr(self, *args): return _cpp.IceModelVec_has_attr(self, *args)
    def string_attr(self, *args): return _cpp.IceModelVec_string_attr(self, *args)
    def double_attr(self, *args): return _cpp.IceModelVec_double_attr(self, *args)
    def array_attr(self, *args): return _cpp.IceModelVec_array_attr(self, *args)
    def set_attrs(self, *args): return _cpp.IceModelVec_set_attrs(self, *args)
    def set_metadata(self, *args): return _cpp.IceModelVec_set_metadata(self, *args)
    def is_valid(self, *args): return _cpp.IceModelVec_is_valid(self, *args)
    def define(self, *args): return _cpp.IceModelVec_define(self, *args)
    def write(self, *args): return _cpp.IceModelVec_write(self, *args)
    def dump(self, *args): return _cpp.IceModelVec_dump(self, *args)
    def read(self, *args): return _cpp.IceModelVec_read(self, *args)
    def regrid(self, *args): return _cpp.IceModelVec_regrid(self, *args)
    def begin_access(self): return _cpp.IceModelVec_begin_access(self)
    def end_access(self): return _cpp.IceModelVec_end_access(self)
    def beginGhostComm(self, *args): return _cpp.IceModelVec_beginGhostComm(self, *args)
    def endGhostComm(self, *args): return _cpp.IceModelVec_endGhostComm(self, *args)
    def set(self, *args): return _cpp.IceModelVec_set(self, *args)
    def get_state_counter(self): return _cpp.IceModelVec_get_state_counter(self)
    def inc_state_counter(self): return _cpp.IceModelVec_inc_state_counter(self)
    __swig_setmethods__["report_range"] = _cpp.IceModelVec_report_range_set
    __swig_getmethods__["report_range"] = _cpp.IceModelVec_report_range_get
    if _newclass:report_range = _swig_property(_cpp.IceModelVec_report_range_get, _cpp.IceModelVec_report_range_set)
    __swig_setmethods__["write_in_glaciological_units"] = _cpp.IceModelVec_write_in_glaciological_units_set
    __swig_getmethods__["write_in_glaciological_units"] = _cpp.IceModelVec_write_in_glaciological_units_get
    if _newclass:write_in_glaciological_units = _swig_property(_cpp.IceModelVec_write_in_glaciological_units_get, _cpp.IceModelVec_write_in_glaciological_units_set)
    __swig_setmethods__["time_independent"] = _cpp.IceModelVec_time_independent_set
    __swig_getmethods__["time_independent"] = _cpp.IceModelVec_time_independent_get
    if _newclass:time_independent = _swig_property(_cpp.IceModelVec_time_independent_get, _cpp.IceModelVec_time_independent_set)
    __swig_setmethods__["output_data_type"] = _cpp.IceModelVec_output_data_type_set
    __swig_getmethods__["output_data_type"] = _cpp.IceModelVec_output_data_type_get
    if _newclass:output_data_type = _swig_property(_cpp.IceModelVec_output_data_type_get, _cpp.IceModelVec_output_data_type_set)
IceModelVec_swigregister = _cpp.IceModelVec_swigregister
IceModelVec_swigregister(IceModelVec)
cvar = _cpp.cvar
secpera = cvar.secpera
pi = cvar.pi
TEMPORARY_STRING_LENGTH = cvar.TEMPORARY_STRING_LENGTH

def PISMOptionsIsSet(*args):
  return _cpp.PISMOptionsIsSet(*args)
PISMOptionsIsSet = _cpp.PISMOptionsIsSet

class planeStar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, planeStar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, planeStar, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ij"] = _cpp.planeStar_ij_set
    __swig_getmethods__["ij"] = _cpp.planeStar_ij_get
    if _newclass:ij = _swig_property(_cpp.planeStar_ij_get, _cpp.planeStar_ij_set)
    __swig_setmethods__["ip1"] = _cpp.planeStar_ip1_set
    __swig_getmethods__["ip1"] = _cpp.planeStar_ip1_get
    if _newclass:ip1 = _swig_property(_cpp.planeStar_ip1_get, _cpp.planeStar_ip1_set)
    __swig_setmethods__["im1"] = _cpp.planeStar_im1_set
    __swig_getmethods__["im1"] = _cpp.planeStar_im1_get
    if _newclass:im1 = _swig_property(_cpp.planeStar_im1_get, _cpp.planeStar_im1_set)
    __swig_setmethods__["jp1"] = _cpp.planeStar_jp1_set
    __swig_getmethods__["jp1"] = _cpp.planeStar_jp1_get
    if _newclass:jp1 = _swig_property(_cpp.planeStar_jp1_get, _cpp.planeStar_jp1_set)
    __swig_setmethods__["jm1"] = _cpp.planeStar_jm1_set
    __swig_getmethods__["jm1"] = _cpp.planeStar_jm1_get
    if _newclass:jm1 = _swig_property(_cpp.planeStar_jm1_get, _cpp.planeStar_jm1_set)
    def __init__(self): 
        this = _cpp.new_planeStar()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_planeStar
    __del__ = lambda self : None;
planeStar_swigregister = _cpp.planeStar_swigregister
planeStar_swigregister(planeStar)

class planeBox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, planeBox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, planeBox, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ij"] = _cpp.planeBox_ij_set
    __swig_getmethods__["ij"] = _cpp.planeBox_ij_get
    if _newclass:ij = _swig_property(_cpp.planeBox_ij_get, _cpp.planeBox_ij_set)
    __swig_setmethods__["ip1"] = _cpp.planeBox_ip1_set
    __swig_getmethods__["ip1"] = _cpp.planeBox_ip1_get
    if _newclass:ip1 = _swig_property(_cpp.planeBox_ip1_get, _cpp.planeBox_ip1_set)
    __swig_setmethods__["im1"] = _cpp.planeBox_im1_set
    __swig_getmethods__["im1"] = _cpp.planeBox_im1_get
    if _newclass:im1 = _swig_property(_cpp.planeBox_im1_get, _cpp.planeBox_im1_set)
    __swig_setmethods__["jp1"] = _cpp.planeBox_jp1_set
    __swig_getmethods__["jp1"] = _cpp.planeBox_jp1_get
    if _newclass:jp1 = _swig_property(_cpp.planeBox_jp1_get, _cpp.planeBox_jp1_set)
    __swig_setmethods__["jm1"] = _cpp.planeBox_jm1_set
    __swig_getmethods__["jm1"] = _cpp.planeBox_jm1_get
    if _newclass:jm1 = _swig_property(_cpp.planeBox_jm1_get, _cpp.planeBox_jm1_set)
    __swig_setmethods__["ip1jp1"] = _cpp.planeBox_ip1jp1_set
    __swig_getmethods__["ip1jp1"] = _cpp.planeBox_ip1jp1_get
    if _newclass:ip1jp1 = _swig_property(_cpp.planeBox_ip1jp1_get, _cpp.planeBox_ip1jp1_set)
    __swig_setmethods__["im1jp1"] = _cpp.planeBox_im1jp1_set
    __swig_getmethods__["im1jp1"] = _cpp.planeBox_im1jp1_get
    if _newclass:im1jp1 = _swig_property(_cpp.planeBox_im1jp1_get, _cpp.planeBox_im1jp1_set)
    __swig_setmethods__["ip1jm1"] = _cpp.planeBox_ip1jm1_set
    __swig_getmethods__["ip1jm1"] = _cpp.planeBox_ip1jm1_get
    if _newclass:ip1jm1 = _swig_property(_cpp.planeBox_ip1jm1_get, _cpp.planeBox_ip1jm1_set)
    __swig_setmethods__["im1jm1"] = _cpp.planeBox_im1jm1_set
    __swig_getmethods__["im1jm1"] = _cpp.planeBox_im1jm1_get
    if _newclass:im1jm1 = _swig_property(_cpp.planeBox_im1jm1_get, _cpp.planeBox_im1jm1_set)
    def __init__(self): 
        this = _cpp.new_planeBox()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_planeBox
    __del__ = lambda self : None;
planeBox_swigregister = _cpp.planeBox_swigregister
planeBox_swigregister(planeBox)

class IceModelVec2(IceModelVec):
    __swig_setmethods__ = {}
    for _s in [IceModelVec]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IceModelVec2, name, value)
    __swig_getmethods__ = {}
    for _s in [IceModelVec]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IceModelVec2, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cpp.new_IceModelVec2(*args)
        try: self.this.append(this)
        except: self.this = this
    def view(self, *args): return _cpp.IceModelVec2_view(self, *args)
    def write(self, *args): return _cpp.IceModelVec2_write(self, *args)
    def read(self, *args): return _cpp.IceModelVec2_read(self, *args)
    def regrid(self, *args): return _cpp.IceModelVec2_regrid(self, *args)
    def get_component(self, *args): return _cpp.IceModelVec2_get_component(self, *args)
    def set_component(self, *args): return _cpp.IceModelVec2_set_component(self, *args)
    __swig_destroy__ = _cpp.delete_IceModelVec2
    __del__ = lambda self : None;
IceModelVec2_swigregister = _cpp.IceModelVec2_swigregister
IceModelVec2_swigregister(IceModelVec2)

class IceModelVec2S(IceModelVec2):
    __swig_setmethods__ = {}
    for _s in [IceModelVec2]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IceModelVec2S, name, value)
    __swig_getmethods__ = {}
    for _s in [IceModelVec2]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IceModelVec2S, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cpp.new_IceModelVec2S(*args)
        try: self.this.append(this)
        except: self.this = this
    def create(self, *args): return _cpp.IceModelVec2S_create(self, *args)
    def put_on_proc0(self, *args): return _cpp.IceModelVec2S_put_on_proc0(self, *args)
    def get_from_proc0(self, *args): return _cpp.IceModelVec2S_get_from_proc0(self, *args)
    def get_array(self, *args): return _cpp.IceModelVec2S_get_array(self, *args)
    def set_to_magnitude(self, *args): return _cpp.IceModelVec2S_set_to_magnitude(self, *args)
    def mask_by(self, *args): return _cpp.IceModelVec2S_mask_by(self, *args)
    def sum(self, *args): return _cpp.IceModelVec2S_sum(self, *args)
    def min(self, *args): return _cpp.IceModelVec2S_min(self, *args)
    def max(self, *args): return _cpp.IceModelVec2S_max(self, *args)
    def diff_x(self, *args): return _cpp.IceModelVec2S_diff_x(self, *args)
    def diff_y(self, *args): return _cpp.IceModelVec2S_diff_y(self, *args)
    def diff_x_stagE(self, *args): return _cpp.IceModelVec2S_diff_x_stagE(self, *args)
    def diff_y_stagE(self, *args): return _cpp.IceModelVec2S_diff_y_stagE(self, *args)
    def diff_x_stagN(self, *args): return _cpp.IceModelVec2S_diff_x_stagN(self, *args)
    def diff_y_stagN(self, *args): return _cpp.IceModelVec2S_diff_y_stagN(self, *args)
    def diff_x_p(self, *args): return _cpp.IceModelVec2S_diff_x_p(self, *args)
    def diff_y_p(self, *args): return _cpp.IceModelVec2S_diff_y_p(self, *args)
    def view_matlab(self, *args): return _cpp.IceModelVec2S_view_matlab(self, *args)
    def __call__(self, *args): return _cpp.IceModelVec2S___call__(self, *args)
    def has_nan(self): return _cpp.IceModelVec2S_has_nan(self)
    def getitem(self, *args): return _cpp.IceModelVec2S_getitem(self, *args)
    def setitem(self, *args): return _cpp.IceModelVec2S_setitem(self, *args)
    def __getitem__(self,*args):
        return self.getitem(args[0][0],args[0][1])
    def __setitem__(self,*args):
        if(len(args)==2):
            self.setitem(args[0][0],args[0][1],args[1])
        else:
            raise ValueError("__setitem__ requires 2 arguments; received %d" % len(args));

    __swig_destroy__ = _cpp.delete_IceModelVec2S
    __del__ = lambda self : None;
IceModelVec2S_swigregister = _cpp.IceModelVec2S_swigregister
IceModelVec2S_swigregister(IceModelVec2S)

class IceModelVec2Mask(IceModelVec2S):
    __swig_setmethods__ = {}
    for _s in [IceModelVec2S]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IceModelVec2Mask, name, value)
    __swig_getmethods__ = {}
    for _s in [IceModelVec2S]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IceModelVec2Mask, name)
    __repr__ = _swig_repr
    def value(self, *args): return _cpp.IceModelVec2Mask_value(self, *args)
    def is_grounded(self, *args): return _cpp.IceModelVec2Mask_is_grounded(self, *args)
    def is_floating(self, *args): return _cpp.IceModelVec2Mask_is_floating(self, *args)
    def fill_where_grounded(self, *args): return _cpp.IceModelVec2Mask_fill_where_grounded(self, *args)
    def fill_where_floating(self, *args): return _cpp.IceModelVec2Mask_fill_where_floating(self, *args)
    def __init__(self): 
        this = _cpp.new_IceModelVec2Mask()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_IceModelVec2Mask
    __del__ = lambda self : None;
IceModelVec2Mask_swigregister = _cpp.IceModelVec2Mask_swigregister
IceModelVec2Mask_swigregister(IceModelVec2Mask)

class PISMVector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PISMVector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PISMVector2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["u"] = _cpp.PISMVector2_u_set
    __swig_getmethods__["u"] = _cpp.PISMVector2_u_get
    if _newclass:u = _swig_property(_cpp.PISMVector2_u_get, _cpp.PISMVector2_u_set)
    __swig_setmethods__["v"] = _cpp.PISMVector2_v_set
    __swig_getmethods__["v"] = _cpp.PISMVector2_v_get
    if _newclass:v = _swig_property(_cpp.PISMVector2_v_get, _cpp.PISMVector2_v_set)
    def magnitude_squared(self): return _cpp.PISMVector2_magnitude_squared(self)
    def magnitude(self): return _cpp.PISMVector2_magnitude(self)
    def __init__(self): 
        this = _cpp.new_PISMVector2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_PISMVector2
    __del__ = lambda self : None;
PISMVector2_swigregister = _cpp.PISMVector2_swigregister
PISMVector2_swigregister(PISMVector2)

class IceModelVec2V(IceModelVec2):
    __swig_setmethods__ = {}
    for _s in [IceModelVec2]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IceModelVec2V, name, value)
    __swig_getmethods__ = {}
    for _s in [IceModelVec2]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IceModelVec2V, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cpp.new_IceModelVec2V(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_IceModelVec2V
    __del__ = lambda self : None;
    def create(self, *args): return _cpp.IceModelVec2V_create(self, *args)
    def write(self, *args): return _cpp.IceModelVec2V_write(self, *args)
    def get_array(self, *args): return _cpp.IceModelVec2V_get_array(self, *args)
    def magnitude(self, *args): return _cpp.IceModelVec2V_magnitude(self, *args)
    def __call__(self, *args): return _cpp.IceModelVec2V___call__(self, *args)
    def is_valid(self, *args): return _cpp.IceModelVec2V_is_valid(self, *args)
    def set_name(self, *args): return _cpp.IceModelVec2V_set_name(self, *args)
    def getitem(self, *args): return _cpp.IceModelVec2V_getitem(self, *args)
    def setitem(self, *args): return _cpp.IceModelVec2V_setitem(self, *args)
    def __getitem__(self,*args):
        return self.getitem(args[0][0],args[0][1])
    def __setitem__(self,*args):
        if(len(args)==2):
            i=args[0][0]; j=args[0][1]
            val = args[1];
            if(isinstance(val,list) and len(val)==2):
                self.setitem(i,j,val[0],val[1])
            else:
                self.setitem(i,j,val)
        else:
            raise ValueError("__setitem__ requires 2 arguments; received %d" % len(args));

IceModelVec2V_swigregister = _cpp.IceModelVec2V_swigregister
IceModelVec2V_swigregister(IceModelVec2V)

class IceModelVec2Stag(IceModelVec2):
    __swig_setmethods__ = {}
    for _s in [IceModelVec2]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IceModelVec2Stag, name, value)
    __swig_getmethods__ = {}
    for _s in [IceModelVec2]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IceModelVec2Stag, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cpp.new_IceModelVec2Stag(*args)
        try: self.this.append(this)
        except: self.this = this
    def create(self, *args): return _cpp.IceModelVec2Stag_create(self, *args)
    def get_array(self, *args): return _cpp.IceModelVec2Stag_get_array(self, *args)
    def begin_access(self): return _cpp.IceModelVec2Stag_begin_access(self)
    def end_access(self): return _cpp.IceModelVec2Stag_end_access(self)
    def __call__(self, *args): return _cpp.IceModelVec2Stag___call__(self, *args)
    def norm_all(self, *args): return _cpp.IceModelVec2Stag_norm_all(self, *args)
    def staggered_to_regular(self, *args): return _cpp.IceModelVec2Stag_staggered_to_regular(self, *args)
    __swig_destroy__ = _cpp.delete_IceModelVec2Stag
    __del__ = lambda self : None;
IceModelVec2Stag_swigregister = _cpp.IceModelVec2Stag_swigregister
IceModelVec2Stag_swigregister(IceModelVec2Stag)

class IceModelVec3D(IceModelVec):
    __swig_setmethods__ = {}
    for _s in [IceModelVec]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IceModelVec3D, name, value)
    __swig_getmethods__ = {}
    for _s in [IceModelVec]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IceModelVec3D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cpp.new_IceModelVec3D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_IceModelVec3D
    __del__ = lambda self : None;
    def begin_access(self): return _cpp.IceModelVec3D_begin_access(self)
    def end_access(self): return _cpp.IceModelVec3D_end_access(self)
    def setColumn(self, *args): return _cpp.IceModelVec3D_setColumn(self, *args)
    def setInternalColumn(self, *args): return _cpp.IceModelVec3D_setInternalColumn(self, *args)
    def getInternalColumn(self, *args): return _cpp.IceModelVec3D_getInternalColumn(self, *args)
    def view_sounding(self, *args): return _cpp.IceModelVec3D_view_sounding(self, *args)
    def beginGhostCommTransfer(self, *args): return _cpp.IceModelVec3D_beginGhostCommTransfer(self, *args)
    def endGhostCommTransfer(self, *args): return _cpp.IceModelVec3D_endGhostCommTransfer(self, *args)
IceModelVec3D_swigregister = _cpp.IceModelVec3D_swigregister
IceModelVec3D_swigregister(IceModelVec3D)

class IceModelVec3(IceModelVec3D):
    __swig_setmethods__ = {}
    for _s in [IceModelVec3D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IceModelVec3, name, value)
    __swig_getmethods__ = {}
    for _s in [IceModelVec3D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IceModelVec3, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cpp.new_IceModelVec3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_IceModelVec3
    __del__ = lambda self : None;
    def create(self, *args): return _cpp.IceModelVec3_create(self, *args)
    def getValColumn(self, *args): return _cpp.IceModelVec3_getValColumn(self, *args)
    def getValColumnQUAD(self, *args): return _cpp.IceModelVec3_getValColumnQUAD(self, *args)
    def getValColumnPL(self, *args): return _cpp.IceModelVec3_getValColumnPL(self, *args)
    def setValColumnPL(self, *args): return _cpp.IceModelVec3_setValColumnPL(self, *args)
    def getValZ(self, *args): return _cpp.IceModelVec3_getValZ(self, *args)
    def getPlaneStarZ(self, *args): return _cpp.IceModelVec3_getPlaneStarZ(self, *args)
    def getPlaneStar_fine(self, *args): return _cpp.IceModelVec3_getPlaneStar_fine(self, *args)
    def getPlaneStar(self, *args): return _cpp.IceModelVec3_getPlaneStar(self, *args)
    def getHorSlice(self, *args): return _cpp.IceModelVec3_getHorSlice(self, *args)
    def getSurfaceValues(self, *args): return _cpp.IceModelVec3_getSurfaceValues(self, *args)
    def extend_vertically(self, *args): return _cpp.IceModelVec3_extend_vertically(self, *args)
IceModelVec3_swigregister = _cpp.IceModelVec3_swigregister
IceModelVec3_swigregister(IceModelVec3)

class IceModelVec3Bedrock(IceModelVec3D):
    __swig_setmethods__ = {}
    for _s in [IceModelVec3D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IceModelVec3Bedrock, name, value)
    __swig_getmethods__ = {}
    for _s in [IceModelVec3D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IceModelVec3Bedrock, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cpp.new_IceModelVec3Bedrock()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_IceModelVec3Bedrock
    __del__ = lambda self : None;
    def create(self, *args): return _cpp.IceModelVec3Bedrock_create(self, *args)
    def setValColumnPL(self, *args): return _cpp.IceModelVec3Bedrock_setValColumnPL(self, *args)
    def getValColumnPL(self, *args): return _cpp.IceModelVec3Bedrock_getValColumnPL(self, *args)
IceModelVec3Bedrock_swigregister = _cpp.IceModelVec3Bedrock_swigregister
IceModelVec3Bedrock_swigregister(IceModelVec3Bedrock)

class PISMVars(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PISMVars, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PISMVars, name)
    __repr__ = _swig_repr
    def add(self, *args): return _cpp.PISMVars_add(self, *args)
    def remove(self, *args): return _cpp.PISMVars_remove(self, *args)
    def get(self, *args): return _cpp.PISMVars_get(self, *args)
    def keys(self): return _cpp.PISMVars_keys(self)
    def check_for_nan(self): return _cpp.PISMVars_check_for_nan(self)
    def __init__(self): 
        this = _cpp.new_PISMVars()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_PISMVars
    __del__ = lambda self : None;
PISMVars_swigregister = _cpp.PISMVars_swigregister
PISMVars_swigregister(PISMVars)

MPI_INCLUDED = _cpp.MPI_INCLUDED
GRID_2D = _cpp.GRID_2D
GRID_3D = _cpp.GRID_3D
GRID_3D_BEDROCK = _cpp.GRID_3D_BEDROCK

def nc_check(*args):
  return _cpp.nc_check(*args)
nc_check = _cpp.nc_check

def check_err(*args):
  return _cpp.check_err(*args)
check_err = _cpp.check_err
class NCTool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NCTool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NCTool, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cpp.new_NCTool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_NCTool
    __del__ = lambda self : None;
    def open_for_reading(self, *args): return _cpp.NCTool_open_for_reading(self, *args)
    def open_for_writing(self, *args): return _cpp.NCTool_open_for_writing(self, *args)
    def move_if_exists(self, *args): return _cpp.NCTool_move_if_exists(self, *args)
    def close(self): return _cpp.NCTool_close(self)
    def find_variable(self, *args): return _cpp.NCTool_find_variable(self, *args)
    def find_dimension(self, *args): return _cpp.NCTool_find_dimension(self, *args)
    def append_time(self, *args): return _cpp.NCTool_append_time(self, *args)
    def write_history(self, *args): return _cpp.NCTool_write_history(self, *args)
    def get_vertical_dims(self, *args): return _cpp.NCTool_get_vertical_dims(self, *args)
    def check_dimension(self, *args): return _cpp.NCTool_check_dimension(self, *args)
    def get_dim_length(self, *args): return _cpp.NCTool_get_dim_length(self, *args)
    def get_dim_limits(self, *args): return _cpp.NCTool_get_dim_limits(self, *args)
    def get_dimension(self, *args): return _cpp.NCTool_get_dimension(self, *args)
    def put_dimension(self, *args): return _cpp.NCTool_put_dimension(self, *args)
    def inq_unlimdim(self, *args): return _cpp.NCTool_inq_unlimdim(self, *args)
    def inq_dimname(self, *args): return _cpp.NCTool_inq_dimname(self, *args)
    def inq_dimids(self, *args): return _cpp.NCTool_inq_dimids(self, *args)
    def inq_nattrs(self, *args): return _cpp.NCTool_inq_nattrs(self, *args)
    def inq_att_name(self, *args): return _cpp.NCTool_inq_att_name(self, *args)
    def inq_att_type(self, *args): return _cpp.NCTool_inq_att_type(self, *args)
    def get_att_text(self, *args): return _cpp.NCTool_get_att_text(self, *args)
    def get_att_double(self, *args): return _cpp.NCTool_get_att_double(self, *args)
    def get_units(self, *args): return _cpp.NCTool_get_units(self, *args)
    def get_nrecords(self, *args): return _cpp.NCTool_get_nrecords(self, *args)
    def get_ncid(self): return _cpp.NCTool_get_ncid(self)
    def define_mode(self): return _cpp.NCTool_define_mode(self)
    def data_mode(self): return _cpp.NCTool_data_mode(self)
NCTool_swigregister = _cpp.NCTool_swigregister
NCTool_swigregister(NCTool)

class PISMIO(NCTool):
    __swig_setmethods__ = {}
    for _s in [NCTool]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PISMIO, name, value)
    __swig_getmethods__ = {}
    for _s in [NCTool]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PISMIO, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cpp.new_PISMIO(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_PISMIO
    __del__ = lambda self : None;
    def open_for_writing(self, *args): return _cpp.PISMIO_open_for_writing(self, *args)
    def get_grid(self, *args): return _cpp.PISMIO_get_grid(self, *args)
    def create_dimensions(self): return _cpp.PISMIO_create_dimensions(self)
    def get_grid_info(self, *args): return _cpp.PISMIO_get_grid_info(self, *args)
    def get_grid_info_2d(self, *args): return _cpp.PISMIO_get_grid_info_2d(self, *args)
    def get_var(self, *args): return _cpp.PISMIO_get_var(self, *args)
    def put_var(self, *args): return _cpp.PISMIO_put_var(self, *args)
    def regrid_var(self, *args): return _cpp.PISMIO_regrid_var(self, *args)
PISMIO_swigregister = _cpp.PISMIO_swigregister
PISMIO_swigregister(PISMIO)

class IceBasalResistancePlasticLaw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IceBasalResistancePlasticLaw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IceBasalResistancePlasticLaw, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cpp.new_IceBasalResistancePlasticLaw(*args)
        try: self.this.append(this)
        except: self.this = this
    def printInfo(self, *args): return _cpp.IceBasalResistancePlasticLaw_printInfo(self, *args)
    def drag(self, *args): return _cpp.IceBasalResistancePlasticLaw_drag(self, *args)
    def dragWithDerivative(self, *args): return _cpp.IceBasalResistancePlasticLaw_dragWithDerivative(self, *args)
    __swig_destroy__ = _cpp.delete_IceBasalResistancePlasticLaw
    __del__ = lambda self : None;
    __swig_setmethods__["plastic_regularize"] = _cpp.IceBasalResistancePlasticLaw_plastic_regularize_set
    __swig_getmethods__["plastic_regularize"] = _cpp.IceBasalResistancePlasticLaw_plastic_regularize_get
    if _newclass:plastic_regularize = _swig_property(_cpp.IceBasalResistancePlasticLaw_plastic_regularize_get, _cpp.IceBasalResistancePlasticLaw_plastic_regularize_set)
    __swig_setmethods__["pseudo_q"] = _cpp.IceBasalResistancePlasticLaw_pseudo_q_set
    __swig_getmethods__["pseudo_q"] = _cpp.IceBasalResistancePlasticLaw_pseudo_q_get
    if _newclass:pseudo_q = _swig_property(_cpp.IceBasalResistancePlasticLaw_pseudo_q_get, _cpp.IceBasalResistancePlasticLaw_pseudo_q_set)
    __swig_setmethods__["pseudo_u_threshold"] = _cpp.IceBasalResistancePlasticLaw_pseudo_u_threshold_set
    __swig_getmethods__["pseudo_u_threshold"] = _cpp.IceBasalResistancePlasticLaw_pseudo_u_threshold_get
    if _newclass:pseudo_u_threshold = _swig_property(_cpp.IceBasalResistancePlasticLaw_pseudo_u_threshold_get, _cpp.IceBasalResistancePlasticLaw_pseudo_u_threshold_set)
    __swig_setmethods__["pseudo_plastic"] = _cpp.IceBasalResistancePlasticLaw_pseudo_plastic_set
    __swig_getmethods__["pseudo_plastic"] = _cpp.IceBasalResistancePlasticLaw_pseudo_plastic_get
    if _newclass:pseudo_plastic = _swig_property(_cpp.IceBasalResistancePlasticLaw_pseudo_plastic_get, _cpp.IceBasalResistancePlasticLaw_pseudo_plastic_set)
IceBasalResistancePlasticLaw_swigregister = _cpp.IceBasalResistancePlasticLaw_swigregister
IceBasalResistancePlasticLaw_swigregister(IceBasalResistancePlasticLaw)


def secondInvariant(*args):
  return _cpp.secondInvariant(*args)
secondInvariant = _cpp.secondInvariant

def secondInvariantDu(*args):
  return _cpp.secondInvariantDu(*args)
secondInvariantDu = _cpp.secondInvariantDu
class IceFlowLaw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IceFlowLaw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IceFlowLaw, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cpp.delete_IceFlowLaw
    __del__ = lambda self : None;
    def setFromOptions(self): return _cpp.IceFlowLaw_setFromOptions(self)
    def effectiveViscosity(self, *args): return _cpp.IceFlowLaw_effectiveViscosity(self, *args)
    def effectiveViscosity_with_derivative(self, *args): return _cpp.IceFlowLaw_effectiveViscosity_with_derivative(self, *args)
    def averagedHardness_from_enth(self, *args): return _cpp.IceFlowLaw_averagedHardness_from_enth(self, *args)
    def exponent(self): return _cpp.IceFlowLaw_exponent(self)
    def hardnessParameter_from_enth(self, *args): return _cpp.IceFlowLaw_hardnessParameter_from_enth(self, *args)
    def softnessParameter_from_enth(self, *args): return _cpp.IceFlowLaw_softnessParameter_from_enth(self, *args)
    def flow_from_enth(self, *args): return _cpp.IceFlowLaw_flow_from_enth(self, *args)
    __swig_setmethods__["rho"] = _cpp.IceFlowLaw_rho_set
    __swig_getmethods__["rho"] = _cpp.IceFlowLaw_rho_get
    if _newclass:rho = _swig_property(_cpp.IceFlowLaw_rho_get, _cpp.IceFlowLaw_rho_set)
    __swig_setmethods__["beta_CC_grad"] = _cpp.IceFlowLaw_beta_CC_grad_set
    __swig_getmethods__["beta_CC_grad"] = _cpp.IceFlowLaw_beta_CC_grad_get
    if _newclass:beta_CC_grad = _swig_property(_cpp.IceFlowLaw_beta_CC_grad_get, _cpp.IceFlowLaw_beta_CC_grad_set)
    __swig_setmethods__["k"] = _cpp.IceFlowLaw_k_set
    __swig_getmethods__["k"] = _cpp.IceFlowLaw_k_get
    if _newclass:k = _swig_property(_cpp.IceFlowLaw_k_get, _cpp.IceFlowLaw_k_set)
    __swig_setmethods__["c_p"] = _cpp.IceFlowLaw_c_p_set
    __swig_getmethods__["c_p"] = _cpp.IceFlowLaw_c_p_get
    if _newclass:c_p = _swig_property(_cpp.IceFlowLaw_c_p_get, _cpp.IceFlowLaw_c_p_set)
    __swig_setmethods__["latentHeat"] = _cpp.IceFlowLaw_latentHeat_set
    __swig_getmethods__["latentHeat"] = _cpp.IceFlowLaw_latentHeat_get
    if _newclass:latentHeat = _swig_property(_cpp.IceFlowLaw_latentHeat_get, _cpp.IceFlowLaw_latentHeat_set)
    __swig_setmethods__["triple_point_temp"] = _cpp.IceFlowLaw_triple_point_temp_set
    __swig_getmethods__["triple_point_temp"] = _cpp.IceFlowLaw_triple_point_temp_get
    if _newclass:triple_point_temp = _swig_property(_cpp.IceFlowLaw_triple_point_temp_get, _cpp.IceFlowLaw_triple_point_temp_set)
IceFlowLaw_swigregister = _cpp.IceFlowLaw_swigregister
IceFlowLaw_swigregister(IceFlowLaw)


def IceFlowLawIsPatersonBuddCold(*args):
  return _cpp.IceFlowLawIsPatersonBuddCold(*args)
IceFlowLawIsPatersonBuddCold = _cpp.IceFlowLawIsPatersonBuddCold

def IceFlowLawUsesGrainSize(*args):
  return _cpp.IceFlowLawUsesGrainSize(*args)
IceFlowLawUsesGrainSize = _cpp.IceFlowLawUsesGrainSize
class GPBLDIce(IceFlowLaw):
    __swig_setmethods__ = {}
    for _s in [IceFlowLaw]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GPBLDIce, name, value)
    __swig_getmethods__ = {}
    for _s in [IceFlowLaw]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GPBLDIce, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cpp.new_GPBLDIce(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_GPBLDIce
    __del__ = lambda self : None;
    def setFromOptions(self): return _cpp.GPBLDIce_setFromOptions(self)
    def softnessParameter_from_enth(self, *args): return _cpp.GPBLDIce_softnessParameter_from_enth(self, *args)
GPBLDIce_swigregister = _cpp.GPBLDIce_swigregister
GPBLDIce_swigregister(GPBLDIce)

class ThermoGlenIce(IceFlowLaw):
    __swig_setmethods__ = {}
    for _s in [IceFlowLaw]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThermoGlenIce, name, value)
    __swig_getmethods__ = {}
    for _s in [IceFlowLaw]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThermoGlenIce, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cpp.new_ThermoGlenIce(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_ThermoGlenIce
    __del__ = lambda self : None;
    def softnessParameter_from_enth(self, *args): return _cpp.ThermoGlenIce_softnessParameter_from_enth(self, *args)
    def softnessParameter_from_temp(self, *args): return _cpp.ThermoGlenIce_softnessParameter_from_temp(self, *args)
    def hardnessParameter_from_temp(self, *args): return _cpp.ThermoGlenIce_hardnessParameter_from_temp(self, *args)
    def flow_from_enth(self, *args): return _cpp.ThermoGlenIce_flow_from_enth(self, *args)
    def flow_from_temp(self, *args): return _cpp.ThermoGlenIce_flow_from_temp(self, *args)
ThermoGlenIce_swigregister = _cpp.ThermoGlenIce_swigregister
ThermoGlenIce_swigregister(ThermoGlenIce)

class CustomGlenIce(ThermoGlenIce):
    __swig_setmethods__ = {}
    for _s in [ThermoGlenIce]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CustomGlenIce, name, value)
    __swig_getmethods__ = {}
    for _s in [ThermoGlenIce]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CustomGlenIce, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cpp.new_CustomGlenIce(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_CustomGlenIce
    __del__ = lambda self : None;
    def softnessParameter_from_enth(self, *args): return _cpp.CustomGlenIce_softnessParameter_from_enth(self, *args)
    def softnessParameter_from_temp(self, *args): return _cpp.CustomGlenIce_softnessParameter_from_temp(self, *args)
    def hardnessParameter_from_enth(self, *args): return _cpp.CustomGlenIce_hardnessParameter_from_enth(self, *args)
    def hardnessParameter_from_temp(self, *args): return _cpp.CustomGlenIce_hardnessParameter_from_temp(self, *args)
    def averagedHardness_from_enth(self, *args): return _cpp.CustomGlenIce_averagedHardness_from_enth(self, *args)
    def flow_from_enth(self, *args): return _cpp.CustomGlenIce_flow_from_enth(self, *args)
    def flow_from_temp(self, *args): return _cpp.CustomGlenIce_flow_from_temp(self, *args)
    def setHardness(self, *args): return _cpp.CustomGlenIce_setHardness(self, *args)
    def setSoftness(self, *args): return _cpp.CustomGlenIce_setSoftness(self, *args)
    def setExponent(self, *args): return _cpp.CustomGlenIce_setExponent(self, *args)
    def setDensity(self, *args): return _cpp.CustomGlenIce_setDensity(self, *args)
    def setSchoofRegularization(self, *args): return _cpp.CustomGlenIce_setSchoofRegularization(self, *args)
CustomGlenIce_swigregister = _cpp.CustomGlenIce_swigregister
CustomGlenIce_swigregister(CustomGlenIce)

class HookeIce(ThermoGlenIce):
    __swig_setmethods__ = {}
    for _s in [ThermoGlenIce]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HookeIce, name, value)
    __swig_getmethods__ = {}
    for _s in [ThermoGlenIce]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HookeIce, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cpp.new_HookeIce(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_HookeIce
    __del__ = lambda self : None;
    def softnessParameter_from_temp(self, *args): return _cpp.HookeIce_softnessParameter_from_temp(self, *args)
HookeIce_swigregister = _cpp.HookeIce_swigregister
HookeIce_swigregister(HookeIce)

class ThermoGlenArrIce(ThermoGlenIce):
    __swig_setmethods__ = {}
    for _s in [ThermoGlenIce]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThermoGlenArrIce, name, value)
    __swig_getmethods__ = {}
    for _s in [ThermoGlenIce]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThermoGlenArrIce, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cpp.new_ThermoGlenArrIce(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_ThermoGlenArrIce
    __del__ = lambda self : None;
    def A(self): return _cpp.ThermoGlenArrIce_A(self)
    def Q(self): return _cpp.ThermoGlenArrIce_Q(self)
    def softnessParameter_from_temp(self, *args): return _cpp.ThermoGlenArrIce_softnessParameter_from_temp(self, *args)
    def tempFromSoftness(self, *args): return _cpp.ThermoGlenArrIce_tempFromSoftness(self, *args)
    def flow_from_temp(self, *args): return _cpp.ThermoGlenArrIce_flow_from_temp(self, *args)
ThermoGlenArrIce_swigregister = _cpp.ThermoGlenArrIce_swigregister
ThermoGlenArrIce_swigregister(ThermoGlenArrIce)

class ThermoGlenArrIceWarm(ThermoGlenArrIce):
    __swig_setmethods__ = {}
    for _s in [ThermoGlenArrIce]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThermoGlenArrIceWarm, name, value)
    __swig_getmethods__ = {}
    for _s in [ThermoGlenArrIce]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThermoGlenArrIceWarm, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cpp.new_ThermoGlenArrIceWarm(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_ThermoGlenArrIceWarm
    __del__ = lambda self : None;
    def A(self): return _cpp.ThermoGlenArrIceWarm_A(self)
    def Q(self): return _cpp.ThermoGlenArrIceWarm_Q(self)
ThermoGlenArrIceWarm_swigregister = _cpp.ThermoGlenArrIceWarm_swigregister
ThermoGlenArrIceWarm_swigregister(ThermoGlenArrIceWarm)

class GKparts(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GKparts, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GKparts, name)
    __repr__ = _swig_repr
    __swig_setmethods__["eps_total"] = _cpp.GKparts_eps_total_set
    __swig_getmethods__["eps_total"] = _cpp.GKparts_eps_total_get
    if _newclass:eps_total = _swig_property(_cpp.GKparts_eps_total_get, _cpp.GKparts_eps_total_set)
    __swig_setmethods__["eps_diff"] = _cpp.GKparts_eps_diff_set
    __swig_getmethods__["eps_diff"] = _cpp.GKparts_eps_diff_get
    if _newclass:eps_diff = _swig_property(_cpp.GKparts_eps_diff_get, _cpp.GKparts_eps_diff_set)
    __swig_setmethods__["eps_disl"] = _cpp.GKparts_eps_disl_set
    __swig_getmethods__["eps_disl"] = _cpp.GKparts_eps_disl_get
    if _newclass:eps_disl = _swig_property(_cpp.GKparts_eps_disl_get, _cpp.GKparts_eps_disl_set)
    __swig_setmethods__["eps_basal"] = _cpp.GKparts_eps_basal_set
    __swig_getmethods__["eps_basal"] = _cpp.GKparts_eps_basal_get
    if _newclass:eps_basal = _swig_property(_cpp.GKparts_eps_basal_get, _cpp.GKparts_eps_basal_set)
    __swig_setmethods__["eps_gbs"] = _cpp.GKparts_eps_gbs_set
    __swig_getmethods__["eps_gbs"] = _cpp.GKparts_eps_gbs_get
    if _newclass:eps_gbs = _swig_property(_cpp.GKparts_eps_gbs_get, _cpp.GKparts_eps_gbs_set)
    def __init__(self): 
        this = _cpp.new_GKparts()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_GKparts
    __del__ = lambda self : None;
GKparts_swigregister = _cpp.GKparts_swigregister
GKparts_swigregister(GKparts)

class HybridIce(ThermoGlenIce):
    __swig_setmethods__ = {}
    for _s in [ThermoGlenIce]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HybridIce, name, value)
    __swig_getmethods__ = {}
    for _s in [ThermoGlenIce]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HybridIce, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cpp.new_HybridIce(*args)
        try: self.this.append(this)
        except: self.this = this
    def flow_from_temp(self, *args): return _cpp.HybridIce_flow_from_temp(self, *args)
    def flowParts(self, *args): return _cpp.HybridIce_flowParts(self, *args)
    __swig_destroy__ = _cpp.delete_HybridIce
    __del__ = lambda self : None;
HybridIce_swigregister = _cpp.HybridIce_swigregister
HybridIce_swigregister(HybridIce)

class HybridIceStripped(HybridIce):
    __swig_setmethods__ = {}
    for _s in [HybridIce]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HybridIceStripped, name, value)
    __swig_getmethods__ = {}
    for _s in [HybridIce]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HybridIceStripped, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cpp.new_HybridIceStripped(*args)
        try: self.this.append(this)
        except: self.this = this
    def flow_from_temp(self, *args): return _cpp.HybridIceStripped_flow_from_temp(self, *args)
    __swig_destroy__ = _cpp.delete_HybridIceStripped
    __del__ = lambda self : None;
HybridIceStripped_swigregister = _cpp.HybridIceStripped_swigregister
HybridIceStripped_swigregister(HybridIceStripped)

class EnthalpyConverter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnthalpyConverter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EnthalpyConverter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cpp.new_EnthalpyConverter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_EnthalpyConverter
    __del__ = lambda self : None;
    def viewConstants(self, *args): return _cpp.EnthalpyConverter_viewConstants(self, *args)
    def getPressureFromDepth(self, *args): return _cpp.EnthalpyConverter_getPressureFromDepth(self, *args)
    def getMeltingTemp(self, *args): return _cpp.EnthalpyConverter_getMeltingTemp(self, *args)
    def getEnthalpyCTS(self, *args): return _cpp.EnthalpyConverter_getEnthalpyCTS(self, *args)
    def getEnthalpyInterval(self, *args): return _cpp.EnthalpyConverter_getEnthalpyInterval(self, *args)
    def getCTS(self, *args): return _cpp.EnthalpyConverter_getCTS(self, *args)
    def isTemperate(self, *args): return _cpp.EnthalpyConverter_isTemperate(self, *args)
    def isLiquified(self, *args): return _cpp.EnthalpyConverter_isLiquified(self, *args)
    def getAbsTemp(self, *args): return _cpp.EnthalpyConverter_getAbsTemp(self, *args)
    def getPATemp(self, *args): return _cpp.EnthalpyConverter_getPATemp(self, *args)
    def getWaterFraction(self, *args): return _cpp.EnthalpyConverter_getWaterFraction(self, *args)
    def getEnth(self, *args): return _cpp.EnthalpyConverter_getEnth(self, *args)
    def getEnthPermissive(self, *args): return _cpp.EnthalpyConverter_getEnthPermissive(self, *args)
    def getEnthAtWaterFraction(self, *args): return _cpp.EnthalpyConverter_getEnthAtWaterFraction(self, *args)
EnthalpyConverter_swigregister = _cpp.EnthalpyConverter_swigregister
EnthalpyConverter_swigregister(EnthalpyConverter)

class ICMEnthalpyConverter(EnthalpyConverter):
    __swig_setmethods__ = {}
    for _s in [EnthalpyConverter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICMEnthalpyConverter, name, value)
    __swig_getmethods__ = {}
    for _s in [EnthalpyConverter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ICMEnthalpyConverter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cpp.new_ICMEnthalpyConverter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_ICMEnthalpyConverter
    __del__ = lambda self : None;
    def getMeltingTemp(self, *args): return _cpp.ICMEnthalpyConverter_getMeltingTemp(self, *args)
    def getAbsTemp(self, *args): return _cpp.ICMEnthalpyConverter_getAbsTemp(self, *args)
    def getWaterFraction(self, *args): return _cpp.ICMEnthalpyConverter_getWaterFraction(self, *args)
    def getEnth(self, *args): return _cpp.ICMEnthalpyConverter_getEnth(self, *args)
    def getEnthPermissive(self, *args): return _cpp.ICMEnthalpyConverter_getEnthPermissive(self, *args)
    def getEnthAtWaterFraction(self, *args): return _cpp.ICMEnthalpyConverter_getEnthAtWaterFraction(self, *args)
    def isTemperate(self, *args): return _cpp.ICMEnthalpyConverter_isTemperate(self, *args)
ICMEnthalpyConverter_swigregister = _cpp.ICMEnthalpyConverter_swigregister
ICMEnthalpyConverter_swigregister(ICMEnthalpyConverter)

class ShallowStressBalance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShallowStressBalance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShallowStressBalance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cpp.new_ShallowStressBalance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_ShallowStressBalance
    __del__ = lambda self : None;
    def init(self, *args): return _cpp.ShallowStressBalance_init(self, *args)
    def set_boundary_conditions(self, *args): return _cpp.ShallowStressBalance_set_boundary_conditions(self, *args)
    def get_advective_2d_velocity(self): return _cpp.ShallowStressBalance_get_advective_2d_velocity(self)
    def get_max_2d_velocity(self, *args): return _cpp.ShallowStressBalance_get_max_2d_velocity(self, *args)
    def get_basal_frictional_heating(self): return _cpp.ShallowStressBalance_get_basal_frictional_heating(self)
    def get_D2(self): return _cpp.ShallowStressBalance_get_D2(self)
    def extend_the_grid(self, *args): return _cpp.ShallowStressBalance_extend_the_grid(self, *args)
    def stdout_report(self): return _cpp.ShallowStressBalance_stdout_report(self)
ShallowStressBalance_swigregister = _cpp.ShallowStressBalance_swigregister
ShallowStressBalance_swigregister(ShallowStressBalance)

class SSB_Trivial(ShallowStressBalance):
    __swig_setmethods__ = {}
    for _s in [ShallowStressBalance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SSB_Trivial, name, value)
    __swig_getmethods__ = {}
    for _s in [ShallowStressBalance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SSB_Trivial, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cpp.new_SSB_Trivial(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_SSB_Trivial
    __del__ = lambda self : None;
    def update(self, *args): return _cpp.SSB_Trivial_update(self, *args)
SSB_Trivial_swigregister = _cpp.SSB_Trivial_swigregister
SSB_Trivial_swigregister(SSB_Trivial)

class SSAStrengthExtension(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SSAStrengthExtension, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SSAStrengthExtension, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cpp.new_SSAStrengthExtension(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_SSAStrengthExtension
    __del__ = lambda self : None;
    def set_notional_strength(self, *args): return _cpp.SSAStrengthExtension_set_notional_strength(self, *args)
    def set_min_thickness(self, *args): return _cpp.SSAStrengthExtension_set_min_thickness(self, *args)
    def get_notional_strength(self): return _cpp.SSAStrengthExtension_get_notional_strength(self)
    def get_min_thickness(self): return _cpp.SSAStrengthExtension_get_min_thickness(self)
SSAStrengthExtension_swigregister = _cpp.SSAStrengthExtension_swigregister
SSAStrengthExtension_swigregister(SSAStrengthExtension)

class SSA(ShallowStressBalance):
    __swig_setmethods__ = {}
    for _s in [ShallowStressBalance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SSA, name, value)
    __swig_getmethods__ = {}
    for _s in [ShallowStressBalance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SSA, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["strength_extension"] = _cpp.SSA_strength_extension_set
    __swig_getmethods__["strength_extension"] = _cpp.SSA_strength_extension_get
    if _newclass:strength_extension = _swig_property(_cpp.SSA_strength_extension_get, _cpp.SSA_strength_extension_set)
    __swig_destroy__ = _cpp.delete_SSA
    __del__ = lambda self : None;
    def init(self, *args): return _cpp.SSA_init(self, *args)
    def update(self, *args): return _cpp.SSA_update(self, *args)
    def set_initial_guess(self, *args): return _cpp.SSA_set_initial_guess(self, *args)
    def stdout_report(self): return _cpp.SSA_stdout_report(self)
    def add_vars_to_output(self, *args): return _cpp.SSA_add_vars_to_output(self, *args)
    def define_variables(self, *args): return _cpp.SSA_define_variables(self, *args)
    def write_variables(self, *args): return _cpp.SSA_write_variables(self, *args)
    def get_diagnostics(self, *args): return _cpp.SSA_get_diagnostics(self, *args)
SSA_swigregister = _cpp.SSA_swigregister
SSA_swigregister(SSA)

class SSA_taud(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SSA_taud, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SSA_taud, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cpp.new_SSA_taud(*args)
        try: self.this.append(this)
        except: self.this = this
    def compute(self, *args): return _cpp.SSA_taud_compute(self, *args)
    __swig_destroy__ = _cpp.delete_SSA_taud
    __del__ = lambda self : None;
SSA_taud_swigregister = _cpp.SSA_taud_swigregister
SSA_taud_swigregister(SSA_taud)

class FEStoreNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FEStoreNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FEStoreNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["h"] = _cpp.FEStoreNode_h_set
    __swig_getmethods__["h"] = _cpp.FEStoreNode_h_get
    if _newclass:h = _swig_property(_cpp.FEStoreNode_h_get, _cpp.FEStoreNode_h_set)
    __swig_setmethods__["H"] = _cpp.FEStoreNode_H_set
    __swig_getmethods__["H"] = _cpp.FEStoreNode_H_get
    if _newclass:H = _swig_property(_cpp.FEStoreNode_H_get, _cpp.FEStoreNode_H_set)
    __swig_setmethods__["tauc"] = _cpp.FEStoreNode_tauc_set
    __swig_getmethods__["tauc"] = _cpp.FEStoreNode_tauc_get
    if _newclass:tauc = _swig_property(_cpp.FEStoreNode_tauc_get, _cpp.FEStoreNode_tauc_set)
    __swig_setmethods__["hx"] = _cpp.FEStoreNode_hx_set
    __swig_getmethods__["hx"] = _cpp.FEStoreNode_hx_get
    if _newclass:hx = _swig_property(_cpp.FEStoreNode_hx_get, _cpp.FEStoreNode_hx_set)
    __swig_setmethods__["hy"] = _cpp.FEStoreNode_hy_set
    __swig_getmethods__["hy"] = _cpp.FEStoreNode_hy_get
    if _newclass:hy = _swig_property(_cpp.FEStoreNode_hy_get, _cpp.FEStoreNode_hy_set)
    __swig_setmethods__["b"] = _cpp.FEStoreNode_b_set
    __swig_getmethods__["b"] = _cpp.FEStoreNode_b_get
    if _newclass:b = _swig_property(_cpp.FEStoreNode_b_get, _cpp.FEStoreNode_b_set)
    __swig_setmethods__["B"] = _cpp.FEStoreNode_B_set
    __swig_getmethods__["B"] = _cpp.FEStoreNode_B_get
    if _newclass:B = _swig_property(_cpp.FEStoreNode_B_get, _cpp.FEStoreNode_B_set)
    def __init__(self): 
        this = _cpp.new_FEStoreNode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_FEStoreNode
    __del__ = lambda self : None;
FEStoreNode_swigregister = _cpp.FEStoreNode_swigregister
FEStoreNode_swigregister(FEStoreNode)

class SSAFEM_SNESCallbackData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SSAFEM_SNESCallbackData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SSAFEM_SNESCallbackData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["da"] = _cpp.SSAFEM_SNESCallbackData_da_set
    __swig_getmethods__["da"] = _cpp.SSAFEM_SNESCallbackData_da_get
    if _newclass:da = _swig_property(_cpp.SSAFEM_SNESCallbackData_da_get, _cpp.SSAFEM_SNESCallbackData_da_set)
    __swig_setmethods__["ssa"] = _cpp.SSAFEM_SNESCallbackData_ssa_set
    __swig_getmethods__["ssa"] = _cpp.SSAFEM_SNESCallbackData_ssa_get
    if _newclass:ssa = _swig_property(_cpp.SSAFEM_SNESCallbackData_ssa_get, _cpp.SSAFEM_SNESCallbackData_ssa_set)
    def __init__(self): 
        this = _cpp.new_SSAFEM_SNESCallbackData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_SSAFEM_SNESCallbackData
    __del__ = lambda self : None;
SSAFEM_SNESCallbackData_swigregister = _cpp.SSAFEM_SNESCallbackData_swigregister
SSAFEM_SNESCallbackData_swigregister(SSAFEM_SNESCallbackData)


def SSAFEFunction(*args):
  return _cpp.SSAFEFunction(*args)
SSAFEFunction = _cpp.SSAFEFunction

def SSAFEJacobian(*args):
  return _cpp.SSAFEJacobian(*args)
SSAFEJacobian = _cpp.SSAFEJacobian

def SSAFEMFactory(*args):
  return _cpp.SSAFEMFactory(*args)
SSAFEMFactory = _cpp.SSAFEMFactory
class SSAFEM(SSA):
    __swig_setmethods__ = {}
    for _s in [SSA]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SSAFEM, name, value)
    __swig_getmethods__ = {}
    for _s in [SSA]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SSAFEM, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cpp.new_SSAFEM(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp.delete_SSAFEM
    __del__ = lambda self : None;
    def init(self, *args): return _cpp.SSAFEM_init(self, *args)
SSAFEM_swigregister = _cpp.SSAFEM_swigregister
SSAFEM_swigregister(SSAFEM)


def globalMax(*args):
  return _cpp.globalMax(*args)
globalMax = _cpp.globalMax

def globalMin(*args):
  return _cpp.globalMin(*args)
globalMin = _cpp.globalMin

def globalSum(*args):
  return _cpp.globalSum(*args)
globalSum = _cpp.globalSum
__exactTestIJ_h = _cpp.__exactTestIJ_h

def exactI(*args):
  return _cpp.exactI(*args)
exactI = _cpp.exactI

def exactJ(*args):
  return _cpp.exactJ(*args)
exactJ = _cpp.exactJ


