# Copyright (C) 2011 David Maxwell
# 
# This file is part of PISM.
# 
# PISM is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# 
# PISM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License
# along with PISM; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

import PISM.cpp as cpp

def OptionsGroup(comm,prefix,title):
  """Replacement for the PetscOptionsBegin/End macros.
Usage:
for o in OptionsGroup(comm,pefix,title):
  <Calls to determine options>

The 'o' returned by the iterator is always Null and is
not intended to be meaningful.  The iterator ensures that
the <Calls to determine options> is repeated just as it would be 
within the loop created by the PetscOptionsBegin/End macros.
"""
  cpp.optionsGroupBegin(comm,prefix,title,"");
  while(cpp.optionsGroupContinue()):
    yield None
    cpp.optionsGroupNext()
  cpp.optionsGroupEnd()

def optionsIntWasSet(option,text,default=None):
  (result,is_set)=cpp._optionsInt(option,text)
  if not is_set:
    result = default
  return (result,is_set)
def optionsInt(*args,**kwargs):
  return optionsIntWasSet(*args,**kwargs)[0]

def optionsRealWasSet(option,text,default=None):
  (result,is_set)=cpp._optionsReal(option,text)
  if not is_set:
    result = default
  return (result,is_set)
def optionsReal(*args,**kwargs):
  return optionsRealWasSet(*args,**kwargs)[0]

def optionsStringWasSet(option,text,default=None):
  (result,is_set)=cpp._optionsString(option,text)
  if not is_set:
    result = default
  return (result,is_set)
def optionsString(*args,**kwargs):
  return optionsStringWasSet(*args,**kwargs)[0]

def optionsIntArrayWasSet(option,text,default=None):
  val = cpp._optionsIntArray(option,text)
  is_set = val[-1]
  result = val[:-1]
  if not is_set:
    result = default
  return (result,is_set)
def optionsIntArray(*args,**kwargs):
  return optionsIntArrayWasSet(*args,**kwargs)[0]

def optionsRealArrayWasSet(option,text,default=None):
    val = cpp._optionsRealArray(option,text)
    is_set = val[-1]
    result = val[:-1]
    if not is_set:
      result = default
    return (result,is_set)
def optionsRealArray(*args,**kwargs):
  return optionsRealArrayWasSet(*args,**kwargs)[0]

def optionsStringArrayWasSet(option,text,default=None):
    val = cpp._optionsStringArray(option,text)
    is_set = val[-1]
    result = val[:-1]
    if not is_set:
      result = default
    return (result,is_set)
def optionsStringArray(*args,**kwargs):
  return optionsStringArrayWasSet(*args,**kwargs)[0]


def optionsListWasSet(com,option,text,set,default):
    val = cpp._optionsList(com,option,text,set,default)
    return (val[0],val[1])
def optionsList(*args,**kwargs):
  return optionsListWasSet(*args,**kwargs)[0]

