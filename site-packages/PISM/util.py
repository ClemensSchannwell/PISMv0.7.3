# Copyright (C) 2011, 2012, 2013 David Maxwell
# 
# This file is part of PISM.
# 
# PISM is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3 of the License, or (at your option) any later
# version.
# 
# PISM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License
# along with PISM; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

import PISM
from PISM import netCDF
import sys, time
import numpy as np

class Access:
  def __init__(self,nocomm=None,comm=None):
    if not nocomm is None:
      if isinstance(nocomm,list) or isinstance(nocomm,tuple):
        self.nocomm = nocomm
      else:
        self.nocomm = [nocomm]
      for v in self.nocomm:
        v.begin_access()
    else:
      self.nocomm = None

    if not comm is None:
      if isinstance(comm,list) or isinstance(comm,tuple):
        self.comm = comm
      else:
        self.comm = [comm]
      for v in self.comm:
        v.begin_access()
    else:
      self.comm = None
  def __enter__(self):
    pass
  def __exit__(self,exc_type, exc_value, traceback):
    if not self.nocomm is None:
      for v in self.nocomm:
        v.end_access()
      self.nocomm = None
    
    if not self.comm is None:
      for v in self.comm:
        v.end_access()
        v.update_ghosts()
      self.comm = None

def writeProvenance(outfile,message=None):
  """Saves the time and command line arguments (or the provided message) to 
  the history attribute of the NC file 'outfile'"""
  rank = PISM.Context().rank
  if rank == 0:
    nc = netCDF.Dataset(outfile, 'a')  # append
    if message is None:
      message = time.asctime() + ': ' + ' '.join(sys.argv)
    if 'history' in nc.ncattrs():
      nc.history = message + '\n' + nc.history
    else:
      nc.history = message
    nc.source = "PISM " + PISM.PISM_Revision
    nc.close()
  PISM.Context().com.barrier()


def fileHasVariable(filename,varname):
  ds = netCDF.Dataset(filename)
  has_var = ds.variables.has_key(varname)
  ds.close()
  return has_var



class Bunch:
  def __init__(self, **kwds):
      self.__dict__.update(kwds)

  def has_key(self,k):
    return self.__dict__.has_key(k)

  def __getitem__(self,k):
    return self.__dict__.get(k)

  def update(self,**kwds):
    self.__dict__.update(**kwds)

  def __repr__(self):
      keys = self.__dict__.keys()
      return 'Bunch(%s)'%', '.join(['%s=%s'%(k,self.__dict__[k]) for k in keys])

def randVectorS(grid,scale,stencil_width=None):
  rv = PISM.IceModelVec2S();
  if stencil_width is None:
    rv.create(grid, 'rand vec', PISM.kNoGhosts)
  else:
    rv.create(grid, 'rand vec', PISM.kHasGhosts, stencil_width)
  shape=(grid.xm,grid.ym)
  r = np.random.normal(scale=scale,size=shape)
  with PISM.util.Access(nocomm=rv):
    for (i,j) in grid.points():
      rv[i,j] = r[i-grid.xs,j-grid.ys]
  if stencil_width is not None:
    rv.update_ghosts();
  return rv

def randVectorV(grid,scale,stencil_width=None):
  rv = PISM.IceModelVec2V();
  if stencil_width is None:
    rv.create(grid, 'rand vec', PISM.kNoGhosts)
  else:
    rv.create(grid, 'rand vec', PISM.kHasGhosts,stencil_width)

  shape=(grid.xm,grid.ym)
  r_u = np.random.normal(scale=scale,size=shape)
  r_v = np.random.normal(scale=scale,size=shape)
  with PISM.util.Access(nocomm=rv):
    for (i,j) in grid.points():
      rv[i,j].u = r_u[i-grid.xs,j-grid.ys]
      rv[i,j].v = r_v[i-grid.xs,j-grid.ys]
    if stencil_width is not None:
      rv.update_ghosts();
  return rv

