# Copyright (C) 2011 David Maxwell
# 
# This file is part of PISM.
# 
# PISM is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# 
# PISM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License
# along with PISM; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

from petsc4py import PETSc

class ToProcZero:
  """Utility class for managing communication of IceModelVec's to processor 0
  (e.g. for plotting or otherwise viewing).  Typical use is to construct
  a ToProcZero once to setup a communicator for a particular IceGrid and
  IceModelVec type, and then repeatedly use  ToProcZero.communicate as
  needed."""

  def __init__(self, grid,dof=1,dim=2):
    """Construct a communicator appropriate for communicating IceModelVec's
    of a given type associated with a particular grid.
    
    :param grid: the IceGrid to be shared by all IceModelVec's
    :param dof:  the number of degrees of freedom for the IceModelVec's 
    (e.g. 1 for scalar valued Vecs, 2 for horizontal velocity Vecs)
    :param dim:  the dimension of the IceModel"""
    self.grid = grid
    self.dof = dof
    self.dim = dim

    if dim != 2:
      raise NotImplementedError()

    if dof == 1:
      self.owns_da = False
      self.da = grid.da2
    elif dof == 2:
      da = grid.da2
      self.da = PETSc.DA().create(dim=da.dim,dof=2,sizes=da.sizes,
      proc_sizes=da.proc_sizes,boundary_type=da.boundary_type,
      stencil_width =da.stencil_width,stencil_type=da.stencil_type,
      comm=grid.com)                 
      self.owns_da = True
    else:
      raise NotImplementedError()

    
    self.tmp_U         = self.da.createGlobalVector()
    self.tmp_U_natural = self.da.createNaturalVector()
    self.scatter, self.U0 = PETSc.Scatter.toZero(self.tmp_U_natural)

  def __del__(self):
    self.tmp_U.destroy()
    self.tmp_U_natural.destroy()
    if self.owns_da:
      self.da.destroy()

  def communicate(self,u):
    """Communicates an IceModelVec to processor zero.
    :param u: the IceModelVec to communicate
    :returns: On processor 0, a numpy vector with contents communicated from u. 
    Otherwise returns None."""    
    comm = self.grid.da2.getComm()
    rank = comm.getRank()

    u.copy_to(self.tmp_U)
    self.da.globalToNatural(self.tmp_U,self.tmp_U_natural)
    self.scatter.scatter(self.tmp_U_natural, self.U0, False, PETSc.Scatter.Mode.FORWARD)

    rv = None
    if rank == 0:
      if self.dof == 1:
        rv = self.U0[...].reshape(self.da.sizes, order='f').copy()
      else:
        s=self.da.sizes
        rv = self.U0[...].reshape((2,s[0],s[1]), order='f').copy()
      
    comm.barrier()

    return rv
