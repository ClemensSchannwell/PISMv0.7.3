# Copyright (C) 2011 David Maxwell
# 
# This file is part of PISM.
# 
# PISM is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# 
# PISM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License
# along with PISM; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

import PISM, math
from PISM import util, netCDF, model
from petsc4py import PETSc

SSAAlgorithms = {"fem":PISM.SSAFEM, "fd":PISM.SSAFD }

class SSARun:
  def __init__(self):
    self.grid = None
    self.config = None
    self.modeldata = None
  
  def setup(self):
    self._setFromOptions()
    
    self._initGrid()
    if self.grid == None:
      raise RuntimeError("SSARun failed to provide a grid.")

    self.modeldata = self._constructModelData()
    if self.modeldata == None:
      raise RuntimeError("SSARun._constructModelData failed to provide a ModelData.")
    self.config = self.modeldata.config

    self._initPhysics()
    if (self.modeldata.basal == None) or (self.modeldata.enthalpyconverter == None):
      raise RuntimeError("SSARun._initPhysics failed to initialize the physics of the underlying SSA solver.")

    self.ssa = self._constructSSA()
    if self.ssa == None:
      raise RuntimeError("SSARun._constructSSA failed to provide an SSA.")

    self._initSSACoefficients()
    # FIXME: is there a reasonable check to do here?

    self._initSSA()

  def teardown(self):
    pass

  #//! Solve the SSA
  def solve(self):
    vecs = self.modeldata.vecs;

    self.ssa.init(vecs.asPISMVars())
    if vecs.has('vel_bc'):
      self.ssa.set_boundary_conditions(vecs.bc_mask,vecs.vel_bc)


    PISM.verbPrintf(2,self.grid.com,"* Solving the SSA stress balance ...\n");
    fast = False;
    self.ssa.update(fast);
    vecs.add(self.ssa.get_advective_2d_velocity())

  def write(self,filename):
    grid = self.grid
    vecs = self.modeldata.vecs
    
    pio = PISM.PISMIO(grid)
    pio.open_for_writing(filename,False,True)
    pio.append_time(grid.config.get_string("time_dimension_name"),0.0)
    pio.close()
    
    # Save time & command line
    PISM.util.writeProvenance(filename)

    vecs.writeall(filename)
  
    if vecs.has('vel_ssa'):
      cbar = util.standardCBar(self.grid);
      vecs.vel_ssa.magnitude(cbar)
      cbar.mask_by(vecs.thickness,-0.01/PISM.secpera);
      cbar.write(filename)

  def _setFromOptions(self):
    pass

  def _constructModelData(self):
    return model.ModelData(self.grid)

  def _initGrid(self):
    raise NotImplementedError()
    
  def _initPhysics(self):
    raise NotImplementedError()

  def _allocStdSSACoefficients(self):
    vecs = self.modeldata.vecs; grid = self.grid
    vecs.add( util.standardIceSurfaceVec( grid ), 'surface')
    vecs.add( util.standardIceThicknessVec( grid ), 'thickness')
    vecs.add( util.standardBedrockElevationVec(grid), 'bed')
    vecs.add( util.standardYieldStressVec( grid ), 'tauc')
    vecs.add( util.standardEnthalpyVec( grid ), 'enthalpy' )
    vecs.add( util.standardIceMask( grid ), 'ice_mask' )

  def _allocateBCs(self,velname='_bc',maskname='bc_mask'):
    vecs = self.modeldata.vecs
    vecs.add( util.standard2dVelocityVec( self.grid, name=velname, desc='SSA velocity boundary condition',intent='intent' ), "vel_bc" )
    vecs.add( util.standardBCMask( self.grid,name=maskname ), "bc_mask" )

  def _initSSACoefficients(self):
    raise NotImplementedError()

  def _constructSSA(self):
    md = self.modeldata
    return SSAAlgorithms[md.config.get_string("ssa_method")](md.grid,md.basal,md.enthalpyconverter,md.config)

  def _initSSA(self):
    pass

class SSAExactTestCase(SSARun):
  def __init__(self,Mx,My):
    SSARun.__init__(self)
    self.Mx = Mx; self.My = My;

    # For convenience, provide a grid. It will get initialized later
    # on when _initGrid is called by our setup method.
    self.grid = PISM.Context().newgrid()
  
  def run(self,output_file):
    self.setup()
    self.solve()
    self.report()
    self.write(output_file)
    self.teardown()
  
  def report(self):
      grid = self.grid

      ssa_stdout = self.ssa.stdout_report()
      PISM.verbPrintf(3,grid.com,ssa_stdout)

      maxvecerr = 0.0; avvecerr = 0.0; 
      avuerr = 0.0; avverr = 0.0;
      maxuerr = 0.0; maxverr = 0.0;

      if(self.config.get_flag("do_pseudo_plastic_till")):
        PISM.verbPrintf(1,grid.com, "WARNING: numerical errors not valid for pseudo-plastic till\n")
      PISM.verbPrintf(1,grid.com, "NUMERICAL ERRORS in velocity relative to exact solution:\n")

      vel_ssa = self.modeldata.vecs.vel_ssa
      
      vel_ssa.begin_access()

      exactvelmax = 0; gexactvelmax = 0;
      for (i,j) in self.grid.points():
        x=grid.x[i]; y=grid.y[j]
        (uexact,vexact) = self.exactSolution(i,j,x,y);
        exactnormsq=math.sqrt(uexact*uexact+vexact*vexact);
        exactvelmax = max(exactnormsq,exactvelmax);
        solution = vel_ssa[i,j]
        uerr = abs(solution.u-uexact)
        verr = abs(solution.v-vexact)
        avuerr += uerr;
        avverr += verr;
        maxuerr = max(maxuerr,uerr);
        maxverr = max(maxverr,verr)
        vecerr = math.sqrt(uerr * uerr + verr * verr);
        maxvecerr = max(maxvecerr,vecerr);
        avvecerr = avvecerr + vecerr;

      vel_ssa.end_access();
      
      gexactvelmax = PISM.globalMax(exactvelmax,grid.com);      
      gmaxuerr     = PISM.globalMax(maxuerr,grid.com);
      gmaxverr     = PISM.globalMax(maxverr,grid.com);
      gavuerr      = PISM.globalSum(avuerr,grid.com) / (grid.Mx*grid.My)
      gavverr      = PISM.globalSum(avverr,grid.com) / (grid.Mx*grid.My)
      gmaxvecerr   = PISM.globalMax(maxvecerr,grid.com)
      gavvecerr    = PISM.globalMax(avvecerr,grid.com) / (grid.Mx*grid.My)

      report_velocity_scale = PISM.secpera
      PISM.verbPrintf(1,grid.com, "velocity  :  maxvector   prcntavvec      maxu      maxv       avu       avv\n");
      #FIXME: variable arguments to verbPrintf are not working.  For now, do the string formatting on the python side.  Maybe
      #this is the best approach.
      PISM.verbPrintf(1,grid.com, "           %11.4f%13.5f%10.4f%10.4f%10.4f%10.4f\n",
                      gmaxvecerr*report_velocity_scale, (gavvecerr/gexactvelmax)*100.0,
                      gmaxuerr*report_velocity_scale, gmaxverr*report_velocity_scale, gavuerr*report_velocity_scale, 
                      gavverr*report_velocity_scale) 
      PISM.verbPrintf(1,grid.com, "NUM ERRORS DONE\n")


  def exactSolution(self,i,j,xi,xj):
    raise NotImplementedError()

  def write(self,filename):
    SSARun.write(self,filename)
    
    grid=self.grid
    exact = util.standard2dVelocityVec(grid,name="_exact",desc="SSA exact solution",intent="diagnostic")
    exact.begin_access()
    for (i,j) in grid.points():
      exact[i,j] = self.exactSolution(i,j,grid.x[i],grid.y[j])
    exact.end_access();
    exact.write(filename);

class SSAFromBootFile(SSARun):
  def __init__(self,boot_file):
    SSARun.__init__(self)
    self.grid = PISM.Context().newgrid()
    self.config = self.grid.config
    self.boot_file = boot_file

  def _setFromOptions(self):
    config = self.config

    # FIXME (DAM 4/28/11)
    # These options probably don't belong here.  Seems like IceBasalResistancePlasticLaw
    # should be able to set these for itself.  
    for o in PISM.OptionsGroup(title="Options for pseudo-plastic ice law"):
      # // use pseudo plastic instead of pure plastic; see iMbasal.cc
      config.flag_from_option("pseudo_plastic", "do_pseudo_plastic_till")

      # // power in denominator on pseudo_plastic_uthreshold; typical is q=0.25; q=0 is pure plastic
      config.scalar_from_option("pseudo_plastic_q", "pseudo_plastic_q")
      if PISM.optionsIsSet("-pseudo_plastic_q"):
        config.set_flag("do_pseudo_plastic_till", True)

      # // threshold; at this velocity tau_c is basal shear stress
      config.scalar_from_option("pseudo_plastic_uthreshold", "pseudo_plastic_uthreshold")
      if PISM.optionsIsSet("-pseudo_plastic_uthreshold"):
        config.set_flag("do_pseudo_plastic_till", True);

      # // controls regularization of plastic basal sliding law
      config.scalar_from_option("plastic_reg", "plastic_regularization")

    for o in PISM.OptionsGroup(title="BasalTillStrength"):
      # // plastic_till_c_0 is a parameter in the computation of the till yield stress tau_c
      # // from the thickness of the basal melt water bwat
      # // Note: option is given in kPa.
      config.scalar_from_option("plastic_c0", "till_c_0");

      # // till_pw_fraction is a parameter in the computation of the till yield stress tau_c
      # // from the thickness of the basal melt water bwat
      # // option a pure number (a fraction); no conversion
      config.scalar_from_option("plastic_pwfrac", "till_pw_fraction")


      config.flag_from_option("thk_eff", "thk_eff_basal_water_pressure")

      if PISM.optionsIsSet("-use_ssa_when_grounded"):
        config.scalar_from_option("use_ssa_when_grounded", "use_ssa_when_grounded")
      else:
        # We're using the SSA, and PISM.PISMYieldStress needs to know this
        # to compute yeild stresses.
        config.set_flag("use_ssa_when_grounded",True);

  def _initGrid(self):
    # FIXME: allow specification of Mx and My different from what's
    # in the boot_file.
    PISM.util.init_grid_from_file(self.grid,self.boot_file,
                                  periodicity=PISM.XY_PERIODIC);

  def _initPhysics(self):
    config = self.config
    basal = PISM.IceBasalResistancePlasticLaw(
           config.get("plastic_regularization") / PISM.secpera,
           config.get_flag("do_pseudo_plastic_till"),
           config.get("pseudo_plastic_q"),
           config.get("pseudo_plastic_uthreshold") / PISM.secpera);

    enthalpyconverter = PISM.EnthalpyConverter(config)
    if PISM.getVerbosityLevel() >3:
      enthalpyconverter.viewConstants(PETSc.Viewer.STDOUT())

    if PISM.optionsIsSet("-ssa_glen"):
      ice = PISM.CustomGlenIce(self.grid.com,"",config,enthalpyconverter)
      B_schoof = 3.7e8;     # Pa s^{1/3}; hardness
      ice.setHardness(B_schoof)
    else:
      ice =  PISM.GPBLDIce(self.grid.com, "", config,enthalpyconverter)
    ice.setFromOptions()

    self.modeldata.setPhysics(basal,enthalpyconverter)

  def _initSSACoefficients(self):
    # Build the standard thickness, bed, etc
    self._allocStdSSACoefficients()

    vecs = self.modeldata.vecs
    thickness = vecs.thickness; bed = vecs.bed; enthalpy = vecs.enthalpy
    mask = vecs.ice_mask; surface = vecs.surface

    # Read in the PISM state variables that are used directly in the SSA solver
    for v in [thickness, bed, enthalpy]:
      v.regrid(self.boot_file,True)

    # variables mask and surface are computed from the geometry previously read
    sea_level = 0 # FIXME setFromOption?
    gc = PISM.GeometryCalculator(sea_level,self.modeldata.ice,self.config)
    gc.compute(bed,thickness,mask,surface)

    # Compute yield stress from PISM state variables
    # (basal melt rate, tillphi, and basal water height)
    grid = self.grid

    ds = netCDF.Dataset(self.boot_file)
    has_tauc = ds.variables.has_key('tauc')
    ds.close()

    # if has_tauc:
    #   solver.tauc.regrid(self.boot_file,True)
    # else:
    bmr   = PISM.util.standardBasalMeltRateVec(grid)
    tillphi = PISM.util.standardTillPhiVec(grid)
    bwat = PISM.util.standardBasalWaterVec(grid)
    for v in [bmr,tillphi,bwat]:
       v.regrid(self.boot_file,True)
       vecs.add(v)

    yieldstress = PISM.PISMDefaultYieldStress(self.modeldata.grid,self.modeldata.config)
    yieldstress.init(vecs.asPISMVars()) 
    yieldstress.basal_material_yield_stress(vecs.tauc)
