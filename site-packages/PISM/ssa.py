# Copyright (C) 2011 David Maxwell
# 
# This file is part of PISM.
# 
# PISM is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# 
# PISM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License
# along with PISM; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

import PISM, math
from PISM import util
SSAAlgorithms = {"fem":PISM.SSAFEM, "fd":PISM.SSAFD }

class SSASolver:
  def __init__(self,grid,config=None):
    self.grid = grid
    if config is None: config = grid.config
    self.config = config

    # Variables for the physics
    self.ice   = None
    self.basal = None
    self.enthalpyconverter = None

    self.surface       = None
    self.drivingstress = None

    self.thickness     = None
    self.bed           = None
    self.tauc          = None
    self.enthalpy      = None
    self.ice_mask      = None
      
    self.vel_bc     = None
    self.bc_mask    = None
  
    self.setFromOptions()

    self.ssa = None

    self.vel_ssa = None

    self.ssa_init = False

  def setPhysics(self,ice,basal,enthalpyconverter):
    self.ice = ice;
    self.basal = basal;
    self.enthalpyconverter = enthalpyconverter;

  def buildSSA(self):
    self.ssa = SSAAlgorithms[self.config.get_string("ssa_method")](self.grid,self.basal,self.ice,self.enthalpyconverter,self.config)

  def allocateCoeffs(self,using_explicit_driving_stress=False):
    grid = self.grid
    
    if(using_explicit_driving_stress):
      self.drivingstress = util.standardDrivingStress( grid )
    else:
      self.surface    = util.standardIceSurfaceVec( grid )
    self.thickness  = util.standardIceThicknessVec( grid )
    self.bed        = util.standardBedrockElevationVec( grid )
    self.tauc       = util.standardYieldStressVec( grid )
    self.enthalpy   = util.standardEnthalpyVec( grid )
    self.ice_mask   = util.standardIceMask( grid )

  def setFromOptions(self):
    for o in PISM.OptionsGroup(self.grid.com,"","SSA options"):
      (ssa_method,wasSet) = PISM.optionsListWasSet(self.grid.com, "-ssa_method", 
                                    "Algorithm for computing the SSA solution",
                                    ["fem","fd"], "fd")
      if wasSet: self.config.set_string("ssa_method",ssa_method);
      self.config.scalar_from_option("ssa_epsfd",  "epsilon_ssafd");
      self.config.scalar_from_option("ssa_maxi", "max_iterations_ssafd");
      self.config.scalar_from_option("ssa_rtol", "ssafd_relative_convergence");

  def allocateBCs(self,velname='_bc',maskname='bc_mask'):
    self.vel_bc     = util.standard2dVelocityVec( self.grid, name=velname, desc='SSA velocity boundary condition',intent='intent' )
    self.bc_mask    = util.standardBCMask( self.grid,name=maskname )

  def readCoeffsFromFile(self,filename,omit=None):
    # Variables that are always used.
    vars = set([self.surface,self.bed,self.tauc,self.enthalpy,self.ice_mask])

    # Optional variables
    if not self.thickness is None:
      vars.add(self.thickness)
    if not self.drivingstress is None:
      vars.add(self.drivingstress)
    if not self.vel_bc is None:
      vars.add(self.vel_bc); vars.add(self.bc_mask)

    # Remove variables that are not needed.
    if not omit is None:
      vars.difference_update(omit)
    
    # We've got our list.  Read them in
    for v in vars:
      v.regrid(filename,True)

  def solve(self):
    if not self.ssa_init:
      pismVars = PISM.PISMVars()
      for var in [self.thickness,self.bed,self.tauc,self.enthalpy,self.ice_mask]:
        pismVars.add(var)
      if not self.surface is None:
        pismVars.add(self.surface)
      if not self.drivingstress is None:
        print 'adding driving stress'
        print self.drivingstress.string_attr("name")
        pismVars.add(self.drivingstress,'ssa_driving_stress')

      # The SSA instance will not keep a reference to pismVars; it only uses it to extract
      # its desired variables.  So it is safe to pass it pismVars and then let pismVars
      # go out of scope at the end of this method.
      self.ssa.init(pismVars)

      if not self.vel_bc is None:
        self.ssa.set_boundary_conditions(self.bc_mask,self.vel_bc)
      self.ssa_init = True
    
    PISM.verbPrintf(2,self.grid.com,"* Solving the SSA stress balance ...\n");
    fast = False;
    self.ssa.update(fast);
    self.vel_ssa = self.ssa.get_advective_2d_velocity()

  def solution(self):
    return self.vel_ssa

  def write(self,filename):
    vars = [self.surface,self.drivingstress,self.bed,self.thickness,self.tauc,self.enthalpy,self.ice_mask]
    for var in vars:
      if not var is None:
        var.write(filename)
    
    if not self.vel_ssa is None:
      vel_ssa = self.vel_ssa;
      vel_ssa.write(filename)
    
      cbar = util.standardCBar(self.grid);
      vel_ssa.magnitude(cbar)
      cbar.mask_by(self.thickness,-0.01/PISM.secpera);
    
      cbar.write(filename)


class SSARun:
  def __init__(self):
    self.grid = None
    self.config = None
    self.solver = None
  
  def setup(self):
    self._setFromOptions()
    
    self._initGrid()
    if self.grid == None:
      raise RuntimeError("SSARun failed to provide a grid.")
    self.config = self.grid.config

    self.solver = self._constructSSA()
    if self.solver == None:
      raise RuntimeError("SSARun failed to provide an SSA solver.")

    self._initPhysics()
    if (self.solver.ice == None) or (self.solver.basal == None) or (self.solver.enthalpyconverter == None):
      raise RuntimeError("SSARun._initPhysics failed to initialize the physics of the underlying SSA solver.")

    self._initSSACoefficients()
    # FIXME: is there a reasonable check to do here?

    self.solver.buildSSA()
    self._initSSA()

  def teardown(self):
    pass

  #//! Solve the SSA
  def solve(self):
    self.solver.solve()

  def write(self,filename):
    grid = self.grid
    
    pio = PISM.PISMIO(grid)
    pio.open_for_writing(filename,False,True)
    pio.append_time(grid.config.get_string("time_dimension_name"),0.0)
    pio.close()
    
    self.solver.write(filename)

  def _setFromOptions(self):
    pass

  def _constructSSA(self):
    return SSASolver(self.grid)

  def _initGrid(self):
    raise NotImplementedError()
    
  def _initPhysics(self):
    raise NotImplementedError()
  
  def _initSSACoefficients(self):
    raise NotImplementedError()

  def _initSSA(self):
    pass

class SSAExactTestCase(SSARun):
  def __init__(self,Mx,My):
    SSARun.__init__(self)
    self.Mx = Mx; self.My = My;

    # For convenience, provide a grid. It will get initialized later
    # on when _initGrid is called by our setup method.
    self.grid = PISM.Context().newgrid()
  
  def run(self,output_file):
    self.setup()
    self.solve()
    self.report()
    self.write(output_file)
    self.teardown()
  
  def report(self):
      grid = self.grid

      ssa_stdout = self.solver.ssa.stdout_report()
      PISM.verbPrintf(3,grid.com,ssa_stdout)

      maxvecerr = 0.0; avvecerr = 0.0; 
      avuerr = 0.0; avverr = 0.0;
      maxuerr = 0.0; maxverr = 0.0;

      if(self.config.get_flag("do_pseudo_plastic_till")):
        PISM.verbPrintf(1,grid.com, "WARNING: numerical errors not valid for pseudo-plastic till\n")
      PISM.verbPrintf(1,grid.com, "NUMERICAL ERRORS in velocity relative to exact solution:\n")

      vel_ssa = self.solver.ssa.get_advective_2d_velocity()
      
      vel_ssa.begin_access()

      exactvelmax = 0; gexactvelmax = 0;
      for (i,j) in self.grid.points():
        x=grid.x[i]; y=grid.y[j]
        (uexact,vexact) = self.exactSolution(i,j,x,y);
        exactnormsq=math.sqrt(uexact*uexact+vexact*vexact);
        exactvelmax = max(exactnormsq,exactvelmax);
        solution = vel_ssa[i,j]
        uerr = abs(solution.u-uexact)
        verr = abs(solution.v-vexact)
        avuerr += uerr;
        avverr += verr;
        maxuerr = max(maxuerr,uerr);
        maxverr = max(maxverr,verr)
        vecerr = math.sqrt(uerr * uerr + verr * verr);
        maxvecerr = max(maxvecerr,vecerr);
        avvecerr = avvecerr + vecerr;

      vel_ssa.end_access();
      
      gexactvelmax = PISM.globalMax(exactvelmax,grid.com);      
      gmaxuerr     = PISM.globalMax(maxuerr,grid.com);
      gmaxverr     = PISM.globalMax(maxverr,grid.com);
      gavuerr      = PISM.globalSum(avuerr,grid.com) / (grid.Mx*grid.My)
      gavverr      = PISM.globalSum(avverr,grid.com) / (grid.Mx*grid.My)
      gmaxvecerr   = PISM.globalMax(maxvecerr,grid.com)
      gavvecerr    = PISM.globalMax(avvecerr,grid.com) / (grid.Mx*grid.My)

      report_velocity_scale = PISM.secpera
      PISM.verbPrintf(1,grid.com, "velocity  :  maxvector   prcntavvec      maxu      maxv       avu       avv\n");
      #FIXME: variable arguments to verbPrintf are not working.  For now, do the string formatting on the python side.  Maybe
      #this is the best approach.
      PISM.verbPrintf(1,grid.com, "           %11.4f%13.5f%10.4f%10.4f%10.4f%10.4f\n",
                      gmaxvecerr*report_velocity_scale, (gavvecerr/gexactvelmax)*100.0,
                      gmaxuerr*report_velocity_scale, gmaxverr*report_velocity_scale, gavuerr*report_velocity_scale, 
                      gavverr*report_velocity_scale) 
      PISM.verbPrintf(1,grid.com, "NUM ERRORS DONE\n")


  def exactSolution(self,i,j,xi,xj):
    raise NotImplementedError()

  def write(self,filename):
    SSARun.write(self,filename)
    
    grid=self.grid
    exact = util.standard2dVelocityVec(grid,name="_exact",desc="SSA exact solution",intent="diagnostic")
    exact.begin_access()
    for (i,j) in grid.points():
      exact[i,j] = self.exactSolution(i,j,grid.x[i],grid.y[j])
    exact.end_access();
    exact.write(filename);
