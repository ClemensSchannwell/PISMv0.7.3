// Use
// dot -Tpng initialization-sequence.dot -o initialization-sequence.png
// to create the picture.

digraph pism_init {
  // Global graph parameters
  node [fontname=Arial fontsize=10 shape=box width=3];
  edge [fontname=Arial fontsize=10];
  graph [fontname=Arial fontsize=10 ranksep=0.1 nodesep=0.1];

  subgraph cluster_grid {
    label = "Set computational grid parameters\rIceModel::grid_setup()";
    URL = "\ref IceModel::grid_setup()";
    labeljust = r;

    is_i_set1 [label = "Is -i set?"];

    grid_from_file [label = "Get ALL grid settings from file" URL="\ref NCTool::get_grid()"];

    subgraph cluster_set_grid_defaults {
      label = "Set default grid parameters\nIceModel::set_grid_defaults()";
      labeljust = r;
      URL = "\ref IceModel::set_grid_defaults()";

      is_boot_from_set1 [label = "Is -boot_from set?"];
      
      grid_from_boot_file [label = "Get SOME grid settings from file\n(boot file DOES NOT fully determine grid)" URL="\ref NCTool::get_grid()"];
      
      fail_in_IceModel1 [label = "ERROR in base class IceModel"]
      
      is_boot_from_set1 -> grid_from_boot_file [label = "yes"];
      is_boot_from_set1 -> fail_in_IceModel1 [label = "no"];

    }

    is_i_set1 -> is_boot_from_set1 [label = "no"];
    is_i_set1 -> grid_from_file [label = "yes"];

    grid_from_options [label = "Complete setting grid from options\nIceModel::set_grid_from_options()" color=darkgreen URL="\ref IceModel::set_grid_from_options()"];
      
    grid_from_boot_file -> grid_from_options;

    createDA [label = "Distribute the model across processors\nIceGrid::createDA()" URL="\ref IceGrid::createDA()"];
    {grid_from_file grid_from_options} -> createDA;
  }

  setFromOptions [label = "Process the bulk of physics-related options\nIceModel::setFromOptions()" color=darkgreen URL="\ref IceModel::setFromOptions()"];
  createDA -> setFromOptions;
  
  createVecs [label = "Memory allocation\nIceModel::createVecs()" color=darkgreen URL="\ref IceModel::createVecs()"];
  setFromOptions -> createVecs;

  init_physics [label = "Some physics initialization\nIceModel::init_physics()" color=darkgreen URL="\ref IceModel::init_physics()"];
  createVecs -> init_physics;

  init_couplers [label = "Init atmosphere and ocean couplers\nIceModel::init_couplers()" color=darkgreen URL="\ref IceModel::init_couplers()"];
  init_physics -> init_couplers;

  init_couplers -> is_i_set2;

  subgraph cluster_model_state {
    label = "Set starting values of\rmodel state variables\rIceModel::model_state_setup()";
    labeljust = r;
    URL = "\ref IceModel::model_state_setup()";

    is_i_set2 [label = "Is -i set?"];

    initFromFile [label = "IceModel::initFromFile()" color=darkgreen URL="\ref IceModel::initFromFile()"];
    
    subgraph cluster_set_values_from_options {
      label = "Set variables by bootstrap from a file\n(derived classes may set vars in other ways) \nIceModel::set_vars_from_options()";
      labeljust = r;
      URL = "\ref IceModel::set_vars_from_options()";

      is_boot_from_set [label = "Is -boot_from set?"];
      
      bootstrap_from_file [label = "IceModel::bootstrapFromFile()" color=darkgreen URL="\ref IceModel::bootstrapFromFile()"];
      
      fail_in_IceModel [label = "ERROR in base class IceModel"]
      
      is_boot_from_set -> bootstrap_from_file [label = "yes"];
      is_boot_from_set -> fail_in_IceModel [label = "no"];
      
    }
    is_i_set2 -> initFromFile [label = "yes"];
    is_i_set2 -> is_boot_from_set [label = "no"];

    regrid [label = "Regrid other data if -regrid_from\nIceModel::regrid()" color=darkgreen URL="\ref IceModel::regrid()"];
    {initFromFile bootstrap_from_file} -> regrid;
  }  


  report [label = "IceModel::report_grid_parameters()" URL="\ref IceModel::report_grid_parameters()"];
  regrid -> report;

  allocate_internal_objects [label = "Allocate memory for additional internals\nIceModel::allocate_internal_objects()" URL="\ref IceModel::allocate_internal_objects()"];
  report -> allocate_internal_objects;

  misc [label = "Miscellaneous initialization tasks\nIceModel::misc_setup()" color=darkgreen URL="\ref IceModel::misc_setup()"];
  allocate_internal_objects -> misc;

  misc -> done;
}
