SHELL = /bin/sh
VPATH = src:src/exact
ALL : all

IBM_AR=ar -X64 -rs
IBM_LINKER=mpCC_r -q64

#FLAGS:

WITH_NETCDF?=1
WITH_FFTW?=1
WITH_GSL?=1

NETCDF_INC= -I$(NETCDF_DIR)/include
NETCDF_LIB= -L$(NETCDF_DIR)/lib
CFLAGS+= -DWITH_NETCDF=${WITH_NETCDF} 
ifneq (WITH_NETCDF, 0)
    CFLAGS+= $(NETCDF_INC)
    LDFLAGS+= $(NETCDF_LIB)
endif

FFTW_INC= -I$(FFTW_DIR)/include
FFTW_LIB= -L$(FFTW_DIR)/lib64
CFLAGS+= -DWITH_FFTW=${WITH_FFTW} 
ifneq (WITH_FFTW, 0)
    CFLAGS+= $(FFTW_INC)
    LDFLAGS+= $(FFTW_LIB)
endif

GSL_INC= -I$(GSL_DIR)/include
GSL_LIB= -L$(GSL_DIR)/lib

ifneq (WITH_GSL, 0)
    CFLAGS+= $(GSL_INC)
    LDFLAGS+= $(GSL_LIB)
endif

# for now will not use GSL so -bed_def_lc will not work
# (one should probably "export WITH_GSL=0" too)
CFLAGS+= -DWITH_GSL=0

#CFLAGS+= -DWITH_NETCDF=${WITH_NETCDF} -DWITH_FFTW=${WITH_FFTW}\
#	-DWITH_GSL=${WITH_GSL} -pipe

#ICE_LIB_FLAGS= -L`pwd`/obj -Wl,-rpath,`pwd`/obj -lpism -ltests ${PETSC_LIB}
ICE_LIB_FLAGS= $(LDFLAGS) -L`pwd`/obj -ltests ${PETSC_LIB}

ifeq (${WITH_NETCDF}, 1)
	ICE_LIB_FLAGS+= -lnetcdf
endif
ifeq (${WITH_FFTW}, 1)
	ICE_LIB_FLAGS+= -lfftw3
endif
ifeq (${WITH_GSL}, 1)
	ICE_LIB_FLAGS+= -lgsl -lgslcblas
endif

#VARIABLES:

#executables= flowTable pismr pismv pisms simpleISO simpleFG simpleI shelf get_drag
executables= flowTable pismr pismv pisms simpleISO simpleFG simpleI get_drag

ice_sources= extrasGSL.cc grid.cc iMbasal.cc iMbeddef.cc iMdefaults.cc\
	iMgrainsize.cc iMIO.cc iMIOnetcdf.cc iMmacayeal.cc iMoptions.cc\
	iMregrid.cc iMtemp.cc iMutil.cc iMvelocity.cc iMviewers.cc\
	iceModel.cc materials.cc 
ice_csources= cubature.c
ICE_OBJS= $(ice_sources:.cc=.o) cubature.o

tests_sources= exactTestsABCDE.c exactTestsFG.c exactTestH.c exactTestI.c
TESTS_OBJS= $(tests_sources:.c=.o)

other_sources= flowTable.cc simplify.cc iceEISModel.cc iceHEINOModel.cc\
	iceROSSModel.cc run.cc verify.cc iceCompModel.cc get_drag.cc shelf.cc \
        iceExactStreamModel.cc
other_csources= simpleISO.c simpleFG.c simpleI.c

depfiles= $(ice_sources:.cc=.d) $(ice_csources:.c=.d) $(tests_sources:.c=.d)\
	$(other_sources:.cc=.d) $(other_csources:.c=.d)

include ${PETSC_DIR}/bmake/common/base
CPP = mpCC_r -q64 -E

#TARGETS:

all : depend libpism libtests $(executables)

#libpism : ${ICE_OBJS}
#	${CLINKER} -shared -o obj/libpism.so ${ICE_OBJS}
#	ar cru -s obj/libpism.a ${ICE_OBJS}
libpism : ${ICE_OBJS}
	${IBM_AR} -o obj/libpism.a ${ICE_OBJS}

#libtests : ${TESTS_OBJS}
#	${CLINKER} -shared -o obj/libtests.so ${TESTS_OBJS}
libtests : ${TESTS_OBJS}
	${IBM_AR} -o obj/libtests.a ${TESTS_OBJS}

flowTable : obj/libpism.a flowTable.o
	${IBM_LINKER} -lpism flowTable.o ${ICE_LIB_FLAGS} -o obj/flowTable

get_drag : obj/libpism.a get_drag.o
	${IBM_LINKER} $^ ${ICE_LIB_FLAGS} -o obj/get_drag

pismr : obj/libpism.a run.o
	${IBM_LINKER} $^ ${ICE_LIB_FLAGS} -o obj/pismr

pisms : obj/libpism.a iceEISModel.o iceHEINOModel.o iceROSSModel.o simplify.o
	${IBM_LINKER} $^ ${ICE_LIB_FLAGS} -o obj/pisms

#pismv : iceCompModel.o verify.o obj/libpism.a obj/libtests.a 
pismv : iceCompModel.o verify.o iceExactStreamModel.o obj/libpism.a obj/libtests.a
	${IBM_LINKER} $^ ${ICE_LIB_FLAGS} -o obj/pismv

shelf : obj/libpism.a shelf.o
	${IBM_LINKER} $^ ${ICE_LIB_FLAGS} -o obj/shelf

simpleISO : obj/libtests.a simpleISO.o
	${IBM_LINKER} $^ -lm -L`pwd`/obj -ltests -o obj/simpleISO

simpleFG : obj/libtests.a simpleFG.o
	${IBM_LINKER} $^ -lm -L`pwd`/obj -ltests -o obj/simpleFG

simpleI : obj/libtests.a simpleI.o
	${IBM_LINKER} $^ -lm -L`pwd`/obj -ltests -o obj/simpleI

# Cancel the implicit rules
% : %.cc
% : %.c

# Emacs style tags
.PHONY: tags TAGS
tags TAGS :
	etags *.cc *.hh *.c

# The GNU recommended proceedure for automatically generating dependencies.
# This rule updates the `*.d' to reflect changes in `*.cc' files
%.d : %.cc
	@echo "Dependencies from" $< "-->" $@
	@set -e; rm -f $@; \
	 gcc -MM $< > $@.$$$$; \
	 sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	 rm -f $@.$$$$

# This rule updates the `*.d' to reflect changes in `*.c' files
%.d : %.c
	@echo "Dependencies from" $< "-->" $@
	@set -e; rm -f $@; \
	 gcc -MM $< > $@.$$$$; \
	 sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	 rm -f $@.$$$$

depend : $(depfiles)

depclean :
	@rm -f *.d

clean : depclean

distclean : clean
	rm -f TAGS obj/libpism.so obj/libtests.so \
	 $(patsubst %, obj/%, ${executables})

.PHONY: clean

include $(depfiles)
