#!/usr/bin/env python

## @package linesearch
## \author Ed Bueler, University of Alaska Fairbanks, USA
## \brief A script for doing a line search over stddev parameter of PDD.
## Copyright (C) 2010 Ed Bueler
##
## see README for role of this script
## This script uses NCO (http://nco.sourceforge.net/).

import time, commands
from numpy import array, double, int
from getopt import getopt, GetoptError
from sys import argv, exit

usage="""
LINESEARCH.PY  Do bisection search on stddev parameter of PDD.  Abort search
if stddev=0 and stddev=10 do not cause mean smb error to bracket zero.

Examples:
  ./linesearch.py -t 270.0 -s 0.003 -r 0.6 --diffsfile=foo.txt --startfile=start.nc
  
  ./linesearch.py --help   # print this message
"""

def usagefailure(message):
    print message
    print
    print usage
    exit(2)


#DIFFSFILE=$6  # file which this script MODIFIES by appending a line of
#   results; if runcase.sh has no 6th argument, then, because
#   of how objective.py works, the results will appear at stdout

# name of PISM file with Greenland geometry and precip,smb from Ettema et al.
#   and other needed info to run pclimate:
DATANAME = "Greenland_5km_v1.1.nc"
PISMDATA = "pism_" + DATANAME        

#BASECONFIG = "base_config.nc"      # name of -config_override, for modification

#STARTFILE = "start.nc"             # name of file generated by pismr; see boot.sh


if __name__ == "__main__":
    try:
      opts, args = getopt(argv[1:], "t:s:r:d:", 
                          ["thresh=", "snow=", "refreeze=","stddev=",
                           "diffsfile=", "startfile=", "help","usage"])
    except GetoptError:
      usagefailure('ERROR: INCORRECT COMMAND LINE ARGUMENTS FOR linesearch.py')
    threshold = 273.15
    ddfsnow = 0.003
    refreeze = 0.6
    stddev = 2.53
    diffsfile = "diffs.txt"
    startfile = "start.nc"
    for (opt, optarg) in opts:
        if opt in ("-t", "--thresh"):
            threshhold = float(optarg)
        if opt in ("-s", "--snow"):
            ddfsnow = float(optarg)
        if opt in ("-r", "--refreeze"):
            refreeze = float(optarg)
        if opt in ("-d", "--stddev"):
            stddev = 2.53
        if opt in ("--diffsfile"):
            diffsfile = optarg
        if opt in ("--startfile"):
            startfile = optarg
        if opt in ("--help", "--usage"):
            print usage
            exit(0)

    ddfice = 2.0 * ddfsnow
    
    nameroot = "%.2f_%.4f_%.2f_%.2f" % (threshhold, ddfsnow, refreeze, stddev)
    print "case = "+ nameroot + ":"

    configfile = "config_" + nameroot + ".nc"
    configopt = " -config_override  " + configfile
    print "  creating -config_override file %s ..." % configfile

    try:
      from netCDF4 import Dataset as NC
    except:
      from netCDF3 import Dataset as NC

    #FIXME: need this before creation?:  rm -rf configfile

    try:
      nc_config = NC(configfile, 'w')
    except:
      usagefailure("ERROR: NETCDF FILE '%s' CANNOT BE OPENED FOR WRITING" % configfile)

    overs = nc_config.createVariable("pism_overrides", 'b')  # variable type is NC_BYTE

    overs.pdd_positive_threshold_temp = threshhold
    overs.pdd_factor_snow = ddfsnow
    overs.pdd_factor_ice = ddfice
    overs.pdd_refreeze = refreeze
    overs.pdd_std_dev = stddev
    
    overs[:] = 0
    
    nc_config.close()
    
    # this is output of pclimate, which will be evaluated against PISMDATA
    climatefile = "clim_" + nameroot + ".nc"  

    # change this to "mpiexec -n 8" or similar to run on multiple processes
    mpido=""

    # coupler settings: Fausto 2m air temp parameterization, but default PDD
    #   (w/o Greve/Fausto settings of PDD parameters)
    coupleropt = " -atmosphere searise_greenland -surface pdd"

    climstartopt = " -ys 1990"
    climendopt = " -ye 1991"

    #dt = 0.0833333333 # monthly = (1/12) of year
    dtopt = " -dt 1.0"

    command = mpido + " pclimate -i " + startfile + coupleropt + configopt \
              + climstartopt + climendopt + dtopt + " -o " + climatefile
    #$MPIDO pclimate -i $STARTFILE $COUPLER -config_override $CONFIG \
    #  -ys $CLIMSTARTTIME -ye $CLIMENDTIME -dt $DT -o $CLIMATE

    print "WOULD DO:"
    print command

    exit(0)

    # run PISM:
    try:
        #lasttime = time.time()
        (status,output) = commands.getstatusoutput(command)
        #elapsetime = time.time() - lasttime      
    except KeyboardInterrupt:
        exit(2)
    if status:
        exit(status)
    #print ' finished in %7.4f seconds; reported numerical errors as follows:' % elapsetime
  
    #echo "$SCRIPTNAME  deleting $CONFIG ... no longer needed ..."
    #rm -rf $CONFIG  # don't need this file any more BECAUSE pism_overrides are carried forward into $OUTFILE

    #echo "  computing objective functions by comparing 'acab' in $CLIMATE"
    #echo "    to 'smb' in $PISMDATA and putting objective value in $DIFFSFILE"
    #./objective.py -v acab,smb -H $STARTFILE $CLIMATE $PISMDATA $DIFFSFILE


    #if [ -n "${DELETECLIMATE:+1}" ] ; then
    #echo "$SCRIPTNAME  env var DELETECLIMATE set so deleting $CLIMATE ..."
    #rm -rf $CLIMATE


