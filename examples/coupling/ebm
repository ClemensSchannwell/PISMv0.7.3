#!/usr/bin/env python

from time import sleep
from sys import exit, stderr
from optparse import OptionParser
from numpy import zeros_like, double

try:
    from netCDF4 import Dataset as NC
except:
    from netCDF3 import Dataset as NC

def read_data(name):
    nc = NC(name, 'r')

    x = nc.variables['x'][:]
    y = nc.variables['y'][:]
    t = nc.variables['t'][:]

    usurf = nc.variables['usurf'][:]
    topg  = nc.variables['topg'][:]

    return (x, y, t, usurf, topg)

def write_data(data, name):
    (x, y, t, acab, artm) = data

    # create the file if it does not exist
    nc = NC(name, 'w')

    # try to create variables; if it fails (i.e. if they exist already), do nothing
    try:
        x_dim = nc.createDimension('x', len(x))
        y_dim = nc.createDimension('y', len(y))
        x_var = nc.createVariable('x', 'f8', ('x',))
        y_var = nc.createVariable('y', 'f8', ('y',))

        acab_var = nc.createVariable('acab', 'f8', ('y','x'))
        acab_var.long_name     = "ice-equivalent surface mass balance (accumulation/ablation) rate"
        acab_var.standard_name = "land_ice_surface_specific_mass_balance"
        acab_var.units         = "m year-1"

        artm_var = nc.createVariable('artm', 'f8', ('y','x'))
        artm_var.long_name     = "ice temperature at the top of the ice but below firn"
        artm_var.units         = "K"
    except:
        pass

    nc.variables['x'][:] = x
    nc.variables['y'][:] = y
    nc.variables['acab'][:] = acab
    nc.variables['artm'][:] = artm

    nc.close()

def compute_acab(usurf, topg, t):
    return zeros_like(usurf) + t / 1000.0

def compute_artm(usurf, topg, t):
    return zeros_like(usurf) + 260 + t / 1000.0
    
parser = OptionParser()

parser.usage = "%prog [options]"

parser.description = "Pretends to be a surface model; use with 'pismebm'."
parser.add_option("-i", "--input", dest="input",
                  help="The file to read usurf and topg from")
parser.add_option("-o", "--output", dest="output",
                  help="The file to write acab to")

(options, args) = parser.parse_args()

if not options.input:
    print "Please specify the -i file"
    exit(1)

if not options.output:
    print "Please specify the -o file"
    exit(1)

# read data, do stuff, write data...

x, y, t, usurf, topg = read_data(options.input)
stderr.write("EBM: year = %1.1f. Done reading data from %s...\n" % (t, options.input))

acab = compute_acab(usurf, topg, t)
artm = compute_artm(usurf, topg, t)

stderr.write("EBM: year = %1.1f. Writing data to %s...\n" % (t, options.output))
write_data((x, y, t, acab, artm), options.output)

exit(0)
